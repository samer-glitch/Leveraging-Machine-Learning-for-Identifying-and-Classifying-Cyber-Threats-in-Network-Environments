{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/samer-glitch/Leveraging-Machine-Learning-for-Identifying-and-Classifying-Cyber-Threats-in-Network-Environments/blob/main/Machine%20Learning%20Model%20Training%20and%20Evaluation%20all%20Features%20are%20taken\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3NP2x7lU4nxn"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "G6I-8ixBH2yn"
      },
      "source": [
        "**Loading Dataset** we are trying to analyze medium to large dataset for the same Network Traffic"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "WYZLQlam4opA",
        "outputId": "15fee37d-4981-4413-a6d4-6e46ddb74c0d"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-620f4a39-3363-48d0-8867-31f74acc997c\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-620f4a39-3363-48d0-8867-31f74acc997c\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Unicauca-dataset-April-June-2019-Network-flows-100000rows(ALLFEATURES).csv to Unicauca-dataset-April-June-2019-Network-flows-100000rows(ALLFEATURES).csv\n"
          ]
        }
      ],
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zb0u9b7se4wn",
        "outputId": "98a2e019-f961-43d0-afc1-9026ace8992e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-2-000ae807001b>:3: DtypeWarning: Columns (0,2,4,47,48,49) have mixed types. Specify dtype option on import or set low_memory=False.\n",
            "  df2 = pd.read_csv('Unicauca-dataset-April-June-2019-Network-flows-100000rows(ALLFEATURES).csv')\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "flow_key                100000\n",
            "src_ip_numeric          100000\n",
            "src_ip                  100000\n",
            "src_port                100000\n",
            "dst_ip                  100000\n",
            "dst_port                100000\n",
            "proto                   100000\n",
            "pktTotalCount           100000\n",
            "octetTotalCount         100000\n",
            "min_ps                  100000\n",
            "max_ps                  100000\n",
            "avg_ps                  100000\n",
            "std_dev_ps              100000\n",
            "flowStart               100000\n",
            "flowEnd                 100000\n",
            "flowDuration            100000\n",
            "min_piat                100000\n",
            "max_piat                100000\n",
            "avg_piat                100000\n",
            "std_dev_piat            100000\n",
            "f_pktTotalCount         100000\n",
            "f_octetTotalCount       100000\n",
            "f_min_ps                100000\n",
            "f_max_ps                100000\n",
            "f_avg_ps                100000\n",
            "f_std_dev_ps            100000\n",
            "f_flowStart             100000\n",
            "f_flowEnd               100000\n",
            "f_flowDuration          100000\n",
            "f_min_piat              100000\n",
            "f_max_piat              100000\n",
            "f_avg_piat              100000\n",
            "f_std_dev_piat          100000\n",
            "b_pktTotalCount         100000\n",
            "b_octetTotalCount       100000\n",
            "b_min_ps                100000\n",
            "b_max_ps                100000\n",
            "b_avg_ps                100000\n",
            "b_std_dev_ps            100000\n",
            "b_flowStart             100000\n",
            "b_flowEnd               100000\n",
            "b_flowDuration          100000\n",
            "b_min_piat              100000\n",
            "b_max_piat              100000\n",
            "b_avg_piat              100000\n",
            "b_std_dev_piat          100000\n",
            "flowEndReason           100000\n",
            "category                100000\n",
            "application_protocol    100000\n",
            "web_service             100000\n",
            "dtype: int64\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "df2 = pd.read_csv('Unicauca-dataset-April-June-2019-Network-flows-100000rows(ALLFEATURES).csv')\n",
        "\n",
        "\n",
        "# Check for missing values\n",
        "missing_values = df2.isnull().sum()\n",
        "print(missing_values)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove duplicate rows if any\n",
        "df2 = df2.drop_duplicates()\n",
        "print(f\"Dataset shape after removing duplicates: {df2.shape}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8wbxVMlmHO4v",
        "outputId": "295fe9fd-c21e-4d87-aada-18a72ef57dad"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset shape after removing duplicates: (99974, 50)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "brfGKoywe4sG",
        "outputId": "48062dc2-966d-4d20-c926-9e5f1be196a8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 99974 entries, 0 to 100000\n",
            "Data columns (total 50 columns):\n",
            " #   Column                Non-Null Count  Dtype  \n",
            "---  ------                --------------  -----  \n",
            " 0   flow_key              99973 non-null  object \n",
            " 1   src_ip_numeric        99973 non-null  float64\n",
            " 2   src_ip                99973 non-null  object \n",
            " 3   src_port              99973 non-null  float64\n",
            " 4   dst_ip                99973 non-null  object \n",
            " 5   dst_port              99973 non-null  float64\n",
            " 6   proto                 99973 non-null  float64\n",
            " 7   pktTotalCount         99973 non-null  float64\n",
            " 8   octetTotalCount       99973 non-null  float64\n",
            " 9   min_ps                99973 non-null  float64\n",
            " 10  max_ps                99973 non-null  float64\n",
            " 11  avg_ps                99973 non-null  float64\n",
            " 12  std_dev_ps            99973 non-null  float64\n",
            " 13  flowStart             99973 non-null  float64\n",
            " 14  flowEnd               99973 non-null  float64\n",
            " 15  flowDuration          99973 non-null  float64\n",
            " 16  min_piat              99973 non-null  float64\n",
            " 17  max_piat              99973 non-null  float64\n",
            " 18  avg_piat              99973 non-null  float64\n",
            " 19  std_dev_piat          99973 non-null  float64\n",
            " 20  f_pktTotalCount       99973 non-null  float64\n",
            " 21  f_octetTotalCount     99973 non-null  float64\n",
            " 22  f_min_ps              99973 non-null  float64\n",
            " 23  f_max_ps              99973 non-null  float64\n",
            " 24  f_avg_ps              99973 non-null  float64\n",
            " 25  f_std_dev_ps          99973 non-null  float64\n",
            " 26  f_flowStart           99973 non-null  float64\n",
            " 27  f_flowEnd             99973 non-null  float64\n",
            " 28  f_flowDuration        99973 non-null  float64\n",
            " 29  f_min_piat            99973 non-null  float64\n",
            " 30  f_max_piat            99973 non-null  float64\n",
            " 31  f_avg_piat            99973 non-null  float64\n",
            " 32  f_std_dev_piat        99973 non-null  float64\n",
            " 33  b_pktTotalCount       99973 non-null  float64\n",
            " 34  b_octetTotalCount     99973 non-null  float64\n",
            " 35  b_min_ps              99973 non-null  float64\n",
            " 36  b_max_ps              99973 non-null  float64\n",
            " 37  b_avg_ps              99973 non-null  float64\n",
            " 38  b_std_dev_ps          99973 non-null  float64\n",
            " 39  b_flowStart           99973 non-null  float64\n",
            " 40  b_flowEnd             99973 non-null  float64\n",
            " 41  b_flowDuration        99973 non-null  float64\n",
            " 42  b_min_piat            99973 non-null  float64\n",
            " 43  b_max_piat            99973 non-null  float64\n",
            " 44  b_avg_piat            99973 non-null  float64\n",
            " 45  b_std_dev_piat        99973 non-null  float64\n",
            " 46  flowEndReason         99973 non-null  float64\n",
            " 47  category              99973 non-null  object \n",
            " 48  application_protocol  99973 non-null  object \n",
            " 49  web_service           99973 non-null  object \n",
            "dtypes: float64(44), object(6)\n",
            "memory usage: 38.9+ MB\n"
          ]
        }
      ],
      "source": [
        "df2.info()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iX7gUzGFVA_8",
        "outputId": "3c829753-de65-447b-fe23-310ab93ae19c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[17.  1.  6. nan]\n"
          ]
        }
      ],
      "source": [
        "print(df2['proto'].unique())\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cva-48EYBfHE",
        "outputId": "574b6a97-6353-4844-ca22-b82b3aa0586c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      flowStart       flowEnd  flowDuration\n",
            "0  1.555954e+09  1.555955e+09   1701.385427\n",
            "1  1.555954e+09  1.555955e+09   1701.385515\n",
            "2  1.555964e+09  1.555965e+09   1450.967340\n",
            "3  1.555964e+09  1.555965e+09   1450.967130\n",
            "4  1.555966e+09  1.555966e+09      0.000000\n"
          ]
        }
      ],
      "source": [
        "print(df2[['flowStart', 'flowEnd', 'flowDuration']].head())\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0x_HtOmyRjrl",
        "outputId": "63ea0027-2397-4c1d-9270-195c4f013ae8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Unique values in 'flow_key':\n",
            "['3acee4f4ea001cd5e6d9584d4036b53d' '974ec5991b439c9a7176b88be0c90df0'\n",
            " 'cfa7c2740072befaa89c202499729e08' ... '74566c07b094e7090c77ebbdad4f86a8'\n",
            " '885ddaaf83945546f8a97ede7ca95f24' nan]\n",
            "\n",
            "\n",
            "Unique values in 'src_ip_numeric':\n",
            "[3.23226650e+09 3.23226650e+09 3.23226650e+09 3.23226650e+09\n",
            " 3.23226650e+09 3.23226650e+09 3.23226651e+09 3.23226651e+09\n",
            " 3.23226651e+09 3.23226652e+09 3.23226652e+09 3.23226652e+09\n",
            " 3.23226652e+09 3.23226652e+09 3.23226652e+09 3.23226653e+09\n",
            " 3.23226653e+09 3.23226653e+09 3.23226653e+09 3.23226654e+09\n",
            " 3.23226654e+09 3.23226654e+09 3.23226654e+09 3.23226654e+09\n",
            " 3.23226654e+09 3.23226655e+09 3.23226655e+09 3.23226655e+09\n",
            " 3.23226656e+09 3.23226656e+09 3.23226656e+09 3.23226656e+09\n",
            " 3.23226657e+09 3.23226657e+09 3.23226657e+09 3.23226657e+09\n",
            " 3.23226658e+09 3.23226658e+09 3.23226658e+09 3.23226658e+09\n",
            " 3.23226658e+09 3.23226658e+09 3.23226658e+09 3.23226658e+09\n",
            " 3.23226658e+09 3.23226659e+09 3.23226659e+09 3.23226659e+09\n",
            " 3.23226659e+09 3.23226659e+09 3.23226659e+09 3.23226659e+09\n",
            " 3.23226659e+09 3.23226660e+09 3.23226660e+09 3.23226660e+09\n",
            " 3.23226660e+09 3.23226660e+09 3.23226660e+09 3.23226670e+09\n",
            " 3.23226673e+09 3.23226674e+09 3.23226675e+09 3.23226675e+09\n",
            " 3.23226676e+09 3.23226676e+09 3.23226676e+09 3.23226676e+09\n",
            " 3.23226676e+09 3.23226676e+09 3.23226677e+09 3.23226677e+09\n",
            " 3.23226678e+09 3.23226678e+09 3.23226678e+09 3.23226678e+09\n",
            " 3.23226679e+09 3.23226679e+09 3.23226679e+09 3.23226679e+09\n",
            " 3.23226679e+09 3.23226679e+09 3.23226680e+09 3.23226680e+09\n",
            " 3.23226680e+09 3.23226680e+09 3.23226680e+09 3.23226680e+09\n",
            " 3.23226680e+09 3.23226680e+09 3.23226681e+09 3.23226681e+09\n",
            " 3.23226681e+09 3.23226681e+09 3.23226681e+09 3.23226682e+09\n",
            " 3.23226682e+09 3.23226682e+09 3.23226682e+09 3.23226682e+09\n",
            " 3.23226682e+09 3.23226683e+09 3.23226683e+09 3.23226683e+09\n",
            " 3.23226683e+09 3.23226683e+09 3.23226684e+09 3.23226684e+09\n",
            " 3.23226685e+09 3.23226685e+09 3.23226685e+09 3.23226686e+09\n",
            " 3.23226686e+09 3.23226686e+09 3.23226686e+09 3.23226686e+09\n",
            " 3.23226686e+09 3.23226686e+09 3.23226686e+09 3.23226686e+09\n",
            " 3.23226687e+09 3.23226687e+09 3.23226687e+09            nan]\n",
            "\n",
            "\n",
            "Unique values in 'src_ip':\n",
            "['192.168.121.1' '192.168.121.2' '192.168.121.3' '192.168.121.4'\n",
            " '192.168.121.7' '192.168.121.9' '192.168.121.12' '192.168.121.14'\n",
            " '192.168.121.16' '192.168.121.19' '192.168.121.20' '192.168.121.22'\n",
            " '192.168.121.24' '192.168.121.27' '192.168.121.29' '192.168.121.30'\n",
            " '192.168.121.31' '192.168.121.32' '192.168.121.34' '192.168.121.39'\n",
            " '192.168.121.41' '192.168.121.42' '192.168.121.45' '192.168.121.46'\n",
            " '192.168.121.49' '192.168.121.50' '192.168.121.52' '192.168.121.58'\n",
            " '192.168.121.59' '192.168.121.60' '192.168.121.62' '192.168.121.67'\n",
            " '192.168.121.70' '192.168.121.72' '192.168.121.74' '192.168.121.75'\n",
            " '192.168.121.79' '192.168.121.81' '192.168.121.82' '192.168.121.83'\n",
            " '192.168.121.84' '192.168.121.86' '192.168.121.87' '192.168.121.88'\n",
            " '192.168.121.89' '192.168.121.90' '192.168.121.91' '192.168.121.92'\n",
            " '192.168.121.93' '192.168.121.94' '192.168.121.95' '192.168.121.97'\n",
            " '192.168.121.98' '192.168.121.99' '192.168.121.100' '192.168.121.103'\n",
            " '192.168.121.104' '192.168.121.105' '192.168.121.109' '192.168.121.200'\n",
            " '192.168.121.231' '192.168.121.240' '192.168.121.250' '192.168.122.1'\n",
            " '192.168.122.4' '192.168.122.7' '192.168.122.9' '192.168.122.11'\n",
            " '192.168.122.12' '192.168.122.13' '192.168.122.19' '192.168.122.22'\n",
            " '192.168.122.23' '192.168.122.24' '192.168.122.29' '192.168.122.30'\n",
            " '192.168.122.34' '192.168.122.35' '192.168.122.36' '192.168.122.39'\n",
            " '192.168.122.41' '192.168.122.42' '192.168.122.43' '192.168.122.46'\n",
            " '192.168.122.48' '192.168.122.49' '192.168.122.50' '192.168.122.51'\n",
            " '192.168.122.52' '192.168.122.53' '192.168.122.54' '192.168.122.56'\n",
            " '192.168.122.58' '192.168.122.59' '192.168.122.61' '192.168.122.64'\n",
            " '192.168.122.66' '192.168.122.67' '192.168.122.68' '192.168.122.70'\n",
            " '192.168.122.72' '192.168.122.74' '192.168.122.76' '192.168.122.77'\n",
            " '192.168.122.79' '192.168.122.80' '192.168.122.88' '192.168.122.93'\n",
            " '192.168.122.94' '192.168.122.96' '192.168.122.99' '192.168.122.104'\n",
            " '192.168.122.105' '192.168.122.106' '192.168.122.107' '192.168.122.109'\n",
            " '192.168.122.110' '192.168.122.111' '192.168.122.112' '192.168.122.113'\n",
            " '192.168.122.114' '192.168.122.115' '192.168.122.118' nan]\n",
            "\n",
            "\n",
            "Unique values in 'src_port':\n",
            "[   67.     0. 49158. ... 60973. 60987.    nan]\n",
            "\n",
            "\n",
            "Unique values in 'dst_ip':\n",
            "['172.16.255.185' '172.16.255.186' '10.130.1.166' ... '8.250.101.254'\n",
            " '54.210.107.85' nan]\n",
            "\n",
            "\n",
            "Unique values in 'dst_port':\n",
            "[6.7000e+01 0.0000e+00 3.1280e+03 8.0000e+01 4.4300e+02 2.2220e+03\n",
            " 5.3000e+01 3.8900e+02 1.3700e+02 1.3800e+02 1.2300e+02 9.9300e+02\n",
            " 8.8880e+03 8.4430e+03 5.2280e+03 1.6880e+03 3.5440e+03 6.0271e+04\n",
            " 5.2220e+03 1.9000e+03 5.3237e+04 5.9815e+04 4.9882e+04 8.0800e+03\n",
            " 4.4500e+02 1.3900e+02 6.2827e+04 5.9380e+03 5.9260e+04 5.2230e+03\n",
            " 7.2750e+03 5.3317e+04 6.5444e+04 7.6800e+03 5.0000e+03 4.6500e+02\n",
            " 5.5145e+04 4.9835e+04 4.2700e+02 5.3264e+04 3.3774e+04 4.0742e+04\n",
            " 5.8454e+04 4.3738e+04 4.1630e+04 3.8861e+04 5.8322e+04 3.7652e+04\n",
            " 3.3054e+04 5.9705e+04 6.0382e+04 3.4380e+04 4.6880e+04 5.7512e+04\n",
            " 5.2451e+04 4.3697e+04 3.3048e+04 5.5039e+04 5.1710e+04 4.7961e+04\n",
            " 5.1186e+04 6.0866e+04 6.0865e+04 5.2459e+04 6.0895e+04 6.0894e+04\n",
            " 4.0990e+04 4.2260e+04 6.0906e+04 6.0940e+04 6.0997e+04 4.5596e+04\n",
            " 5.5838e+04 4.2974e+04 5.2882e+04 9.0990e+03 5.7092e+04 5.9355e+04\n",
            " 5.5033e+04 5.2787e+04 5.2795e+04 5.7754e+04 8.5300e+02 5.9733e+04\n",
            " 5.5601e+04 5.4303e+04 5.4311e+04 5.5089e+04 5.7261e+04 5.5657e+04\n",
            " 5.7924e+04 8.0810e+03 9.9990e+03 1.8091e+04 1.8087e+04 5.3342e+04\n",
            " 5.3343e+04 5.3349e+04 5.3381e+04 5.3407e+04 5.3423e+04 5.3424e+04\n",
            " 4.6253e+04 5.3426e+04 5.3427e+04 5.3428e+04 5.3432e+04 5.3434e+04\n",
            " 5.3416e+04 1.9302e+04 5.9675e+04 6.3434e+04 5.0900e+04 5.5515e+04\n",
            " 4.9473e+04 2.6466e+04 6.1767e+04 6.5338e+04 5.4604e+04 5.4064e+04\n",
            " 5.5194e+04 6.3876e+04 5.8473e+04 5.8407e+04 5.3544e+04 6.3175e+04\n",
            " 6.5443e+04 5.9597e+04 6.5445e+04 3.6600e+03 6.1231e+04 2.8380e+04\n",
            " 2.4425e+04 6.4377e+04 6.5220e+04 5.5085e+04 5.0223e+04 5.8356e+04\n",
            " 5.1599e+04 2.6407e+04 4.9946e+04 6.4643e+04 5.9061e+04 1.3408e+04\n",
            " 5.7691e+04 5.4019e+04 5.6189e+04 5.0522e+04 3.9745e+04 5.0854e+04\n",
            " 6.4923e+04 5.5427e+04 6.2216e+04 6.5482e+04 5.6724e+04 5.2750e+04\n",
            " 5.9120e+04 5.0563e+04 4.0923e+04 6.0706e+04 5.4912e+04 4.9580e+04\n",
            " 5.9814e+04 6.2879e+04 5.0791e+04 2.6474e+04 6.5082e+04 6.2897e+04\n",
            " 6.0745e+04 5.9380e+04 5.2290e+04 6.2842e+04 6.5004e+04 6.1436e+04\n",
            " 6.1872e+04 5.9323e+04 5.8377e+04 5.7765e+04 5.2179e+04 3.9010e+04\n",
            " 6.5059e+04 5.0073e+04 5.1844e+04 6.3873e+04 5.9214e+04 5.1857e+04\n",
            " 6.3784e+04 4.9209e+04 5.7654e+04 6.3532e+04 2.6484e+04 5.8073e+04\n",
            " 4.0322e+04 5.1505e+04 3.5591e+04 5.0120e+04 5.8688e+04 6.1986e+04\n",
            " 6.3239e+04 1.0035e+04 5.8822e+04 6.0579e+04 5.6355e+04 7.0070e+03\n",
            " 5.9462e+04 6.1686e+04 3.9552e+04 5.0549e+04 5.3577e+04 6.5405e+04\n",
            " 5.8578e+04 6.2656e+04 5.3683e+04 5.1577e+04 5.6107e+04 5.8958e+04\n",
            " 6.0402e+04 5.9237e+04 1.0181e+04 5.4134e+04 2.6477e+04 6.0600e+04\n",
            " 5.5395e+04 3.5522e+04 5.7402e+04 5.3970e+04 5.1865e+04 5.1333e+04\n",
            " 6.3368e+04 6.2141e+04 5.4391e+04 6.3577e+04 6.4708e+04 3.9244e+04\n",
            " 8.9560e+03 6.4465e+04 5.0679e+04 5.4115e+04 5.3186e+04 6.5159e+04\n",
            " 5.7096e+04 5.4543e+04 5.0603e+04 5.3813e+04 5.1176e+04 2.6430e+04\n",
            " 2.4491e+04 5.0620e+04 5.5607e+04 6.4137e+04 5.0801e+04 5.8045e+04\n",
            " 4.5102e+04 5.0766e+04 6.4607e+04 6.4610e+04 3.9729e+04 5.6427e+04\n",
            " 5.3798e+04 5.6986e+04 5.9712e+04 6.4193e+04 5.0515e+04 5.4245e+04\n",
            " 6.0955e+04 5.4956e+04 6.3669e+04 1.9328e+04 5.3611e+04 5.3214e+04\n",
            " 6.4481e+04 5.2947e+04 6.3770e+04 5.3551e+04 6.0306e+04 6.5079e+04\n",
            " 3.9809e+04 6.0884e+04 1.3086e+04 5.5205e+04 3.8486e+04 6.3644e+04\n",
            " 1.3780e+04 4.9527e+04 5.0867e+04 6.4464e+04 5.7552e+04 5.7559e+04\n",
            " 2.6409e+04 3.9516e+04 5.2193e+04 5.6322e+04 5.3410e+04 5.3700e+04\n",
            " 6.0086e+04 5.7957e+04 5.0728e+04 5.4141e+04 4.7894e+04 4.5762e+04\n",
            " 5.8619e+04 5.0718e+04 6.1613e+04 5.4399e+04 1.4303e+04 1.3066e+04\n",
            " 1.4317e+04 5.9586e+04 4.7775e+04 5.6865e+04 5.1521e+04 5.9294e+04\n",
            " 5.1506e+04 5.2069e+04 6.2584e+04 5.5117e+04 3.9793e+04 5.9867e+04\n",
            " 5.2273e+04 5.2170e+04 1.3007e+04 5.8456e+04 5.2933e+04 6.5271e+04\n",
            " 6.2302e+04 4.9611e+04 5.6141e+04 6.4994e+04 5.4323e+04 6.0658e+04\n",
            " 5.2932e+04 5.0144e+04 5.3414e+04 5.9834e+04 5.0346e+04 6.2464e+04\n",
            " 5.1615e+04 5.5625e+04 5.4588e+04 5.4087e+04 6.1257e+04 5.2308e+04\n",
            " 6.2469e+04 4.9160e+04 5.7184e+04 5.3367e+04 5.5355e+04 6.5500e+04\n",
            " 5.7673e+04 1.3036e+04 2.6436e+04 6.0171e+04 6.2611e+04 6.5233e+04\n",
            " 6.5238e+04 5.3739e+04 5.3375e+04 5.3750e+04 5.2488e+04 8.3890e+03\n",
            " 5.1032e+04 5.7036e+04 5.7808e+04 6.3938e+04 4.3073e+04 4.9361e+04\n",
            " 6.0082e+04 5.5569e+04 6.4700e+04 5.2321e+04 6.3555e+04 6.1101e+04\n",
            " 5.3090e+04 6.3168e+04 5.2472e+04 6.2013e+04 4.9404e+04 5.8912e+04\n",
            " 5.4716e+04 3.4247e+04 3.5332e+04 5.4480e+04 5.1455e+04 6.3588e+04\n",
            " 5.5520e+03 2.4435e+04 5.2697e+04 2.6495e+04 4.8801e+04 6.2602e+04\n",
            " 6.4735e+04 5.1637e+04 4.9880e+04 6.3932e+04 5.8496e+04 5.4221e+04\n",
            " 5.2382e+04 6.1235e+04 4.9189e+04 6.0656e+04 6.3639e+04 2.6435e+04\n",
            " 5.6455e+04 4.9938e+04 5.4704e+04 2.8566e+04 5.6013e+04 5.9425e+04\n",
            " 3.5011e+04 5.9423e+04 5.4125e+04 5.6172e+04 6.5050e+04 5.2814e+04\n",
            " 5.3510e+04 1.3997e+04 5.5898e+04 6.3195e+04 5.3318e+04 6.3173e+04\n",
            " 5.3974e+04 6.5432e+04 6.4044e+04 5.5996e+04 6.1224e+04 5.8306e+04\n",
            " 1.4018e+04 6.5321e+04 4.9194e+04 5.5560e+04 6.4275e+04 4.9104e+04\n",
            " 2.4480e+04 5.6038e+04 5.3554e+04 6.3049e+04 6.4682e+04 5.6628e+04\n",
            " 6.3799e+04 6.3744e+04 5.5659e+04 5.6358e+04 6.4129e+04 5.2407e+04\n",
            " 5.9288e+04 6.4695e+04 3.5201e+04 6.1980e+04 6.0063e+04 5.8813e+04\n",
            " 6.2312e+04 5.7476e+04 5.8421e+04 5.5052e+04 5.4725e+04 6.3842e+04\n",
            " 6.0105e+04 6.2380e+04 5.6081e+04 6.2026e+04 5.8509e+04 5.9151e+04\n",
            " 6.2912e+04 6.1819e+04 6.0809e+04 6.0819e+04 5.0041e+04 5.4486e+04\n",
            " 5.0455e+04 1.9176e+04 5.4922e+04 6.5499e+04 5.7350e+04 6.1887e+04\n",
            " 4.9448e+04 6.2860e+04 6.2871e+04 6.1784e+04 5.9207e+04 6.1792e+04\n",
            " 6.1796e+04 2.4439e+04 5.8838e+04 6.0921e+04 5.3818e+04 6.2389e+04\n",
            " 6.4955e+04 6.1464e+04 5.4130e+04 4.1593e+04 5.4411e+04 6.4232e+04\n",
            " 6.0294e+04 5.4889e+04 5.7189e+04 5.1289e+04 6.2378e+04 6.4668e+04\n",
            " 5.6403e+04 1.0834e+04 5.2410e+04 6.4360e+04 4.9375e+04 5.9206e+04\n",
            " 1.9274e+04 4.9155e+04 5.4181e+04 4.9282e+04 6.3782e+04 2.4447e+04\n",
            " 5.0648e+04 5.0667e+04 6.0048e+04 5.5043e+04 5.8705e+04 5.3910e+04\n",
            " 5.2972e+04 5.9578e+04 6.4317e+04 6.3797e+04 5.8951e+04 4.9728e+04\n",
            " 6.0781e+04 6.9960e+03 5.2241e+04 6.2374e+04 5.5914e+04 5.9160e+04\n",
            " 6.2776e+04 5.4565e+04 1.9351e+04 1.2355e+04 5.9399e+04 5.8198e+04\n",
            " 5.7848e+04 5.6983e+04 5.4741e+04 6.1490e+04 2.4444e+04 5.6222e+04\n",
            " 1.3670e+04 6.1182e+04 4.9479e+04 5.4605e+04 5.6643e+04 5.2145e+04\n",
            " 6.0060e+04 5.3325e+04 6.4268e+04 6.1497e+04 5.4406e+04 5.1220e+03\n",
            " 5.1602e+04 5.1932e+04 2.9785e+04 5.3000e+04 5.9219e+04 1.9108e+04\n",
            " 5.3151e+04 5.8068e+04 5.9006e+04 6.0683e+04 5.0592e+04 5.1643e+04\n",
            " 5.1631e+04 4.9192e+04 5.3964e+04 5.8928e+04 5.1045e+04 1.9136e+04\n",
            " 2.9822e+04 8.9470e+03 4.5810e+04 3.7599e+04 5.2009e+04 5.6987e+04\n",
            " 5.0119e+04 5.7280e+04 5.0723e+04 5.7449e+04 1.2360e+04 5.7967e+04\n",
            " 6.5387e+04 6.5243e+04 4.9198e+04 2.5920e+03 5.8451e+04 5.0672e+04\n",
            " 5.4320e+04 5.6158e+04 5.0050e+04 6.3512e+04 6.1978e+04 5.0581e+04\n",
            " 4.8267e+04 5.1788e+04 5.7764e+04 6.5372e+04 5.6688e+04 6.4542e+04\n",
            " 1.0151e+04 6.3742e+04 5.4380e+04 5.7605e+04 5.1221e+04 5.3620e+04\n",
            " 6.2765e+04 3.6779e+04 5.6287e+04 5.2891e+04 2.4424e+04 4.9196e+04\n",
            " 5.6062e+04 5.4808e+04 5.3030e+04 5.2816e+04 5.1539e+04 3.4982e+04\n",
            " 6.1677e+04 5.5339e+04 6.4028e+04 5.8892e+04 3.0423e+04 3.8199e+04\n",
            " 5.3073e+04 4.1870e+04 6.5168e+04 5.7916e+04 5.9180e+04 5.2514e+04\n",
            " 6.0053e+04 5.1555e+04 5.6943e+04 1.0375e+04 5.9665e+04 5.6340e+04\n",
            " 6.0926e+04 4.8454e+04 6.0729e+04 4.2425e+04 6.1331e+04 5.0371e+04\n",
            " 5.0987e+04 6.1574e+04 4.8456e+04 5.0243e+04 4.9355e+04 1.4016e+04\n",
            " 6.4840e+04 5.3794e+04 5.8965e+04 5.9500e+04 6.0567e+04 4.3416e+04\n",
            " 5.9131e+04 5.2383e+04 5.2039e+04 5.5711e+04 6.3516e+04 5.8100e+04\n",
            " 5.7052e+04 5.0493e+04 5.3530e+04 5.8860e+04 4.1669e+04 4.9237e+04\n",
            " 6.3794e+04 5.2871e+04 5.1764e+04 2.7084e+04 5.0289e+04 6.3081e+04\n",
            " 5.9590e+04 5.7310e+04 5.9272e+04 6.1420e+04 5.7025e+04 5.5804e+04\n",
            " 4.1678e+04 5.9745e+04 5.3019e+04 6.5303e+04 5.2253e+04 1.0011e+04\n",
            " 5.0147e+04 6.0953e+04 5.2109e+04 6.5103e+04 5.6471e+04 6.2455e+04\n",
            " 5.9353e+04 5.5903e+04 5.1640e+04 5.0824e+04 5.7419e+04 6.0573e+04\n",
            " 2.8590e+03 2.6421e+04 5.4855e+04 5.8093e+04 5.9220e+04 5.6117e+04\n",
            " 5.6785e+04 5.2707e+04 4.9578e+04 3.0330e+03 6.2976e+04 5.1427e+04\n",
            " 4.9597e+04 2.6479e+04 2.9667e+04 5.7333e+04 6.4803e+04 4.9761e+04\n",
            " 4.9371e+04 4.3058e+04 5.0961e+04 6.0704e+04 4.1864e+04 6.0880e+04\n",
            " 6.4356e+04 6.2659e+04 6.0893e+04 1.3348e+04 6.0431e+04 5.1849e+04\n",
            " 6.2143e+04 5.3391e+04 6.3886e+04 5.7660e+04 5.3892e+04 6.2980e+04\n",
            " 4.9204e+04 4.7575e+04 5.1189e+04 5.6550e+04 4.2504e+04 6.3488e+04\n",
            " 4.7520e+04 6.0817e+04 5.1197e+04 6.0821e+04 6.4657e+04 5.9938e+04\n",
            " 5.5751e+04 6.3329e+04 5.4169e+04 4.9379e+04 5.1804e+04 5.9013e+04\n",
            " 6.2688e+04 6.1977e+04 4.2018e+04 3.9759e+04 5.0847e+04 2.7175e+04\n",
            " 5.7578e+04 5.3859e+04 5.4614e+04 5.6144e+04 6.3807e+04 5.0475e+04\n",
            " 4.4997e+04 6.0436e+04 6.2666e+04 4.0117e+04 5.1730e+04 6.3979e+04\n",
            " 5.6541e+04 6.3440e+04 5.3666e+04 6.1777e+04 6.2865e+04 5.6179e+04\n",
            " 6.4662e+04 4.9590e+04 6.0263e+04 5.2333e+04 6.0095e+04 4.3129e+04\n",
            " 5.8978e+04 5.9599e+04 6.1673e+04 6.1169e+04 5.7805e+04 5.2983e+04\n",
            " 6.2718e+04 5.7179e+04 5.8051e+04 6.0981e+04 5.8181e+04 6.5176e+04\n",
            " 5.0576e+04 5.5173e+04 4.9340e+04 5.7542e+04 5.3904e+04 6.2117e+04\n",
            " 5.8494e+04 5.7084e+04 5.0514e+04 6.0042e+04 6.4197e+04 6.5289e+04\n",
            " 4.6866e+04 6.1508e+04 5.8210e+04 6.3631e+04 6.3150e+04 6.1594e+04\n",
            " 4.6586e+04 5.9402e+04 5.0112e+04 6.0538e+04 5.4934e+04 5.7556e+04\n",
            " 5.1046e+04 2.3510e+03 6.1178e+04 6.1728e+04 4.9491e+04 5.9213e+04\n",
            " 5.1044e+04 5.9862e+04 3.6519e+04 5.3288e+04 5.9916e+04 5.4180e+04\n",
            " 5.7972e+04 6.4422e+04 1.9019e+04 6.0513e+04 5.7656e+04 3.7624e+04\n",
            " 2.3670e+03 5.6619e+04 6.2321e+04 6.1584e+04 5.9025e+04 6.3274e+04\n",
            " 5.4914e+04 5.7969e+04 6.0122e+04 5.2593e+04 5.1177e+04 1.1077e+04\n",
            " 5.7759e+04 5.6991e+04 5.6190e+04 5.9386e+04 5.3604e+04 4.4243e+04\n",
            " 5.4730e+04 6.3974e+04 5.5312e+04 2.6427e+04 5.9646e+04 5.1897e+04\n",
            " 5.0426e+04 5.6459e+04 6.2041e+04 5.2242e+04 5.3044e+04 5.1576e+04\n",
            " 2.8244e+04 5.6271e+04 6.0944e+04 5.8300e+03 6.5259e+04 4.9644e+04\n",
            " 5.9069e+04 4.9684e+04 5.9244e+04 6.2317e+04 6.2151e+04 5.4764e+04\n",
            " 5.5019e+04 6.2634e+04 4.3136e+04 6.3931e+04 5.0212e+04 5.9413e+04\n",
            " 5.9424e+04 4.9216e+04 5.5436e+04 6.1308e+04 6.2484e+04 3.7690e+04\n",
            " 6.1465e+04 5.3514e+04 6.2203e+04 5.6575e+04 1.5590e+03 6.5359e+04\n",
            " 6.4066e+04 5.0600e+04 5.3590e+04 1.4182e+04 5.8326e+04 2.5370e+04\n",
            " 6.2277e+04 5.8793e+04 5.0140e+04 6.3077e+04 1.3386e+04 5.0202e+04\n",
            " 4.9520e+04 5.8127e+04 5.9980e+04 5.4577e+04 4.9509e+04 6.2258e+04\n",
            " 5.5156e+04 2.6485e+04 4.4170e+04 1.4460e+03 5.4828e+04 5.2258e+04\n",
            " 5.8364e+04 5.0175e+04 6.1359e+04 5.5191e+04 2.5080e+03 5.0278e+04\n",
            " 5.5109e+04 3.7935e+04 4.0384e+04 5.5397e+04 2.6404e+04 5.2015e+04\n",
            " 6.7880e+03 6.0204e+04 6.2601e+04 6.1514e+04 6.0111e+04 5.3952e+04\n",
            " 5.9901e+04 5.2457e+04 5.3523e+04 5.6347e+04 5.7364e+04 4.8122e+04\n",
            " 5.4132e+04 5.7998e+04 6.3040e+04 5.8594e+04 6.3219e+04 7.0710e+03\n",
            " 1.5670e+03 2.6445e+04 7.8390e+03 4.4590e+03 1.5210e+03 6.8810e+03\n",
            " 2.5401e+04 4.9152e+04 2.7021e+04 2.7020e+04 3.4780e+03 2.2790e+04\n",
            " 4.0700e+03 4.5000e+02 4.5900e+02 4.5200e+02 1.6100e+02 4.5800e+02\n",
            " 4.5600e+02 4.5700e+02        nan]\n",
            "\n",
            "\n",
            "Unique values in 'proto':\n",
            "[17.  1.  6. nan]\n",
            "\n",
            "\n",
            "Unique values in 'pktTotalCount':\n",
            "[  22.   17.   43. ... 1550. 2771.   nan]\n",
            "\n",
            "\n",
            "Unique values in 'octetTotalCount':\n",
            "[ 7620.  5670. 15124. ... 12635. 10632.    nan]\n",
            "\n",
            "\n",
            "Unique values in 'min_ps':\n",
            "[ 328.   56.  318.   40.   82.   67.   68.  159.   59.   66.   62.   71.\n",
            "   72.   58.   63.   64.   75.   89.   78.   70.  202.  229.   57.   83.\n",
            "   60.   65.   61.   55.   52.   73.   79.   86.   50.  123.  105.   88.\n",
            " 1378.   76.   48.   92.   87.   77.   96.   29.   69.   51.  102.  192.\n",
            "   74.   80.  210.   84.  111.  119.  118.   91.   41.  209.   81.   54.\n",
            "  160.   97.   95.  108.  104.  242.  962.   53.  238. 1500.   85.  122.\n",
            "  151.  155.  103.  106.   44.   46. 1022.   47.   49.   45.  141.  182.\n",
            " 1263.  125.   99.  200.  214.  112.  131. 1162.  152.  401.  314.   98.\n",
            "   94.  191.  208.  207.  222.  442.  235.  172.  308.   90.  117.  272.\n",
            "  142.  213. 1029.  150.  168.  175.  157.  176.  113.  156.  206.  128.\n",
            "  132.  124.  140.  136.   42.  158.  188.  195.  139.  237.   93.  588.\n",
            "  162. 1400.  386.  190.  239.  137.  348.   nan]\n",
            "\n",
            "\n",
            "Unique values in 'max_ps':\n",
            "[ 394.  354.  352. ... 7290. 3671.   nan]\n",
            "\n",
            "\n",
            "Unique values in 'avg_ps':\n",
            "[346.3636364 333.5294118 351.7209302 ... 278.3793103 161.9871795\n",
            "         nan]\n",
            "\n",
            "\n",
            "Unique values in 'std_dev_ps':\n",
            "[ 25.01008061   9.14019981  26.09849464 ... 244.1799722  421.163489\n",
            "          nan]\n",
            "\n",
            "\n",
            "Unique values in 'flowStart':\n",
            "[1.55595353e+09 1.55596357e+09 1.55596650e+09 ... 1.55595363e+09\n",
            " 1.55595404e+09            nan]\n",
            "\n",
            "\n",
            "Unique values in 'flowEnd':\n",
            "[1.55595523e+09 1.55596502e+09 1.55596650e+09 ... 1.55595524e+09\n",
            " 1.55595394e+09            nan]\n",
            "\n",
            "\n",
            "Unique values in 'flowDuration':\n",
            "[1.70138543e+03 1.70138551e+03 1.45096734e+03 ... 1.34945000e-04\n",
            " 2.40248302e+02            nan]\n",
            "\n",
            "\n",
            "Unique values in 'min_piat':\n",
            "[3.1280500e-04 1.0355949e-02 2.3913400e-04 ... 1.5683889e-02 9.1171217e-01\n",
            "           nan]\n",
            "\n",
            "\n",
            "Unique values in 'max_piat':\n",
            "[198.6564999  198.6572671  248.4247372  ...  45.01941991  45.01975894\n",
            "          nan]\n",
            "\n",
            "\n",
            "Unique values in 'avg_piat':\n",
            "[ 81.01835367 106.3365947   34.54684143 ...   3.32687643   5.46018869\n",
            "          nan]\n",
            "\n",
            "\n",
            "Unique values in 'std_dev_piat':\n",
            "[78.9134418  74.03470663 58.97298926 ... 11.24959072 14.33483342\n",
            "         nan]\n",
            "\n",
            "\n",
            "Unique values in 'f_pktTotalCount':\n",
            "[ 17.  30.   1. ... 441. 837.  nan]\n",
            "\n",
            "\n",
            "Unique values in 'f_octetTotalCount':\n",
            "[ 5670. 10062. 10086. ...  6317.  7753.    nan]\n",
            "\n",
            "\n",
            "Unique values in 'f_min_ps':\n",
            "[ 328.   56.  318.   40.   82.   67.   68.  159.   59.   66.   62.   71.\n",
            "   72.   58.   63.   64.   75.   89.   78.   70.  202.  229.   52.   48.\n",
            "   57.   83.   60.   65.   61.   55.   73.   79.   86.   50.  123.  105.\n",
            "   88. 1378.   76.   92.   87.   77.   96.   29.   69.   51.  102.  192.\n",
            "   74.   80.  210.   84.  111.  119.  118.   91.   41.  112.  209.   81.\n",
            "   54.  160.   97.   95.  108.  104.  242.  962.   53.  238. 1500.   85.\n",
            "  122.  151.  155.  103.  106. 1022.  141.  182. 1263.  281.  125.   99.\n",
            "  200.  214.  131. 1162.  152.  401.  411.  314.   98.   94.  191.  208.\n",
            "  207.  222.  442.  235.   46.   44.  172.  564.  308.  835.  270.  145.\n",
            "   90.  283. 1228.  117.  272.  414.  142.  213.  295. 1029.  150.  168.\n",
            "  175.  157.  176.  113.  889.  156.  206.  128.  132.  124.  140.  136.\n",
            "  158.  188.  121.  408.  195.  139.  166.  556.  237.   93.  588.  576.\n",
            "  162. 1400.  386.  196.  570.  190.  239.  137.  348.  540.   nan]\n",
            "\n",
            "\n",
            "Unique values in 'f_max_ps':\n",
            "[ 354.  352.   56. ... 6677. 4009.   nan]\n",
            "\n",
            "\n",
            "Unique values in 'f_avg_ps':\n",
            "[333.5294118 335.4       336.2       ... 185.3529412 221.5142857\n",
            "         nan]\n",
            "\n",
            "\n",
            "Unique values in 'f_std_dev_ps':\n",
            "[  9.14019981   9.71802449  10.05783277 ... 181.8973836  334.948983\n",
            "          nan]\n",
            "\n",
            "\n",
            "Unique values in 'f_flowStart':\n",
            "[1.55595353e+09 1.55596357e+09 1.55596650e+09 ... 1.55595363e+09\n",
            " 1.55595404e+09            nan]\n",
            "\n",
            "\n",
            "Unique values in 'f_flowEnd':\n",
            "[1.56000000e+12 1.55596650e+09 1.55596684e+09 ... 1.55596609e+09\n",
            " 1.55596633e+09            nan]\n",
            "\n",
            "\n",
            "Unique values in 'f_flowDuration':\n",
            "[1701.385427  1701.385515  1450.96734   ...  256.1694379  240.2482622\n",
            "          nan]\n",
            "\n",
            "\n",
            "Unique values in 'f_min_piat':\n",
            "[0.010463   0.01035595 0.01541305 ... 0.63589406 0.91171217        nan]\n",
            "\n",
            "\n",
            "Unique values in 'f_max_piat':\n",
            "[198.6571701  198.6572671  248.4247372  ...  45.01948094  45.0556109\n",
            "          nan]\n",
            "\n",
            "\n",
            "Unique values in 'f_avg_piat':\n",
            "[106.3365892  106.3365947   50.03335655 ...   7.53439523  12.64464538\n",
            "          nan]\n",
            "\n",
            "\n",
            "Unique values in 'f_std_dev_piat':\n",
            "[74.03470777 74.03470663 65.29003209 ... 15.96577064 19.62647487\n",
            "         nan]\n",
            "\n",
            "\n",
            "Unique values in 'b_pktTotalCount':\n",
            "[   5.    0.   13. ...  511. 1924.   nan]\n",
            "\n",
            "\n",
            "Unique values in 'b_octetTotalCount':\n",
            "[ 1950.     0.  5062. ... 10075.  8113.    nan]\n",
            "\n",
            "\n",
            "Unique values in 'b_min_ps':\n",
            "[ 389.    0.  328.  376.   40.  253.   83.   84.  113.  149.  168.  126.\n",
            "   97.  147.  157.  252.  179.  230.   52.  146.  193.  201.  140.  111.\n",
            "  154.  150.  132.  171.  148.  118.  208.  158.  235.  124.  143.  125.\n",
            "  101.  104.  151.   60.   77.   89.  116.   95.  107.  131.  114.  102.\n",
            "  128.   50.  176.  206.  110.  122.   76.  103.   91.   78.   90.  105.\n",
            "  169.  117.  178.   88.   81.  115.   71.  156.  200.  210.  166.  155.\n",
            "   86.  258.   98.  175.  160.  159.  161.  309.  250.  162.  165.  190.\n",
            "  135.   29.  236.  120.  232.  164.  163.  195.   96.  152.   87.  198.\n",
            "  215.  153.   74.  133.  213.  199.  197.   85.   94.  261.  139.  299.\n",
            "  288.  174.   99.  181.   75.  186.  108.  306.  238.  192.  183.  220.\n",
            "  241.   92.  170.  257.  185.  130.  243.   79.  194.  112.  141.  358.\n",
            "  182.  127.  100.  225.  145.  191.  109.  172.  106.   80.   93.  271.\n",
            "  189.  123.  222.  249.  137.  187.   72.   73.  276.  269.  247.  262.\n",
            "  134.  129.  219.   82.   67.  207.  286.  259.  144.  138.  203.  136.\n",
            "  226.  239.  119.  229.  234.  184.  121.  274.  212.   64.  227.  142.\n",
            "  177.  224.  244.  216.  255.  381.  173.  278.  231.  251.  283.  294.\n",
            "  291.  285.  272.  275.  284.  245.  290.  246.  240.  242.  256.  300.\n",
            "  280.  188.  378.  218.   58.  180.   69.  167.  277.  305.  228.  264.\n",
            "  209.   70.   65.  348.   57.   56.   54.   59.   61.   55.   53.  205.\n",
            "  233.  221.   44.   48.   46.   47.   41.   51.   49.   45.  282.  270.\n",
            "  265.  268.  279.  320.  211. 1488. 1212.  732. 1476.  196.  273.  333.\n",
            "   68.  828.  263.  295.  304.  399. 2960.  202.  298. 2511.  385.  287.\n",
            "  538.  335.  223.  307.  214.  293. 1088.  434. 1391.  267. 1353. 1470.\n",
            "  296.  667.  753.   66.  325.  361.  260.  342.  428.  353.  403. 1500.\n",
            " 1994.   42. 5844. 1223.  292.  334.  326.  343.  204.  248.  313.  217.\n",
            "  281. 1366.  302. 1440.  266.  297.   nan]\n",
            "\n",
            "\n",
            "Unique values in 'b_max_ps':\n",
            "[ 394.    0.  328. ... 3671. 1120.   nan]\n",
            "\n",
            "\n",
            "Unique values in 'b_avg_ps':\n",
            "[390.          0.        389.3846154 ... 113.5348837 324.52\n",
            "         nan]\n",
            "\n",
            "\n",
            "Unique values in 'b_std_dev_ps':\n",
            "[  2.           0.           1.33234677 ... 107.726257   512.4902434\n",
            "          nan]\n",
            "\n",
            "\n",
            "Unique values in 'b_flowStart':\n",
            "[1.55595450e+09 0.00000000e+00 1.55596390e+09 ... 1.55595363e+09\n",
            " 1.55595404e+09            nan]\n",
            "\n",
            "\n",
            "Unique values in 'b_flowEnd':\n",
            "[1.55595471e+09 0.00000000e+00 1.55596498e+09 ... 1.55595482e+09\n",
            " 1.55596594e+09            nan]\n",
            "\n",
            "\n",
            "Unique values in 'b_flowDuration':\n",
            "[1.55e+12 0.00e+00      nan]\n",
            "\n",
            "\n",
            "Unique values in 'b_min_piat':\n",
            "[1.03538040e-02 0.00000000e+00 2.23319530e-02 ... 2.99936122e+02\n",
            " 2.62212800e-03            nan]\n",
            "\n",
            "\n",
            "Unique values in 'b_max_piat':\n",
            "[198.6579649    0.         340.2684541  ...  45.0194819   45.01982212\n",
            "          nan]\n",
            "\n",
            "\n",
            "Unique values in 'b_avg_piat':\n",
            "[51.68918097  0.         89.92758824 ...  6.09926579 10.01033413\n",
            "         nan]\n",
            "\n",
            "\n",
            "Unique values in 'b_std_dev_piat':\n",
            "[ 84.91634781   0.         124.2707447  ...  14.67012648  18.19834004\n",
            "          nan]\n",
            "\n",
            "\n",
            "Unique values in 'flowEndReason':\n",
            "[ 2.  3.  4.  5. nan]\n",
            "\n",
            "\n",
            "Unique values in 'category':\n",
            "['Network' 'Web' 'SoftwareUpdate' 'Unspecified' 'RPC' 'System' 'Cloud'\n",
            " 'Email' 'Media' 'Streaming' 'VoIP' 'Collaborative' 'Music'\n",
            " 'SocialNetwork' 'Video' 'Download-FileTransfer-FileSharing' 'Chat' 'VPN'\n",
            " 'RemoteAccess' 'Game' 'Database' 'Mining' nan]\n",
            "\n",
            "\n",
            "Unique values in 'application_protocol':\n",
            "['Unknown' 'HTTP' 'TLS' 'DNS' 'QUIC' 'IMAPS' 'STUN' 'SMTPS' nan]\n",
            "\n",
            "\n",
            "Unique values in 'web_service':\n",
            "['DHCP' 'ICMP' 'HTTP' 'Microsoft' 'WindowsUpdate' 'Unknown' 'DNS' 'RX'\n",
            " 'TLS' 'NetBIOS' 'GoogleServices' 'Amazon' 'MSN' 'Yahoo' 'MS_OneDrive'\n",
            " 'Google' 'Dropbox' 'GMail' 'UbuntuONE' 'GoogleDrive' 'YouTube'\n",
            " 'HTTP_Proxy' 'NTP' 'Apple' 'AppleiTunes' 'AppleStore' 'ApplePush'\n",
            " 'AppleiCloud' 'IMAPS' 'IMO' 'Office365' 'Skype' 'Cloudflare' 'Spotify'\n",
            " 'LDAP' 'Twitter' 'Facebook' 'LinkedIn' 'Instagram' 'AmazonVideo'\n",
            " 'GooglePlus' 'Github' 'GoogleDocs' 'Teredo' 'BitTorrent' 'Messenger'\n",
            " 'WhatsApp' 'PlayStore' 'Ookla' 'Unencrypted_Jabber' 'SMBv23' 'Wikipedia'\n",
            " 'QUIC' 'Signal' 'CiscoVPN' 'TeamViewer' 'VNC' 'NetFlix' 'Playstation'\n",
            " 'PS_VUE' 'Xbox' 'GoogleMaps' 'GoogleHangoutDuo' 'MQTT' 'Radius' 'SSH'\n",
            " 'STUN' 'Pando_Media_Booster' 'Whois-DAS' 'H323' 'Webex' 'Oracle'\n",
            " 'DataSaver' 'Steam' 'Telegram' 'Mining' 'SNMP' nan]\n",
            "\n",
            "\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Assuming df is your DataFrame\n",
        "\n",
        "# Iterate through each column and print unique values\n",
        "for column in df2.columns:\n",
        "    print(f\"Unique values in '{column}':\")\n",
        "    print(df2[column].unique())\n",
        "    print(\"\\n\")  # Adding a new line for better readability\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "X7ocOYc3ca5t"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "eDD8Fow4ulgX",
        "outputId": "f5b584c0-1115-4077-94a7-58e88dc32862"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-8-f51b3ea1b464>:133: DtypeWarning: Columns (0,2,4,47,48,49) have mixed types. Specify dtype option on import or set low_memory=False.\n",
            "  df = pd.read_csv('Unicauca-dataset-April-June-2019-Network-flows-100000rows(ALLFEATURES).csv')\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset shape after removing duplicates: (99974, 50)\n",
            "Number of instances: 99974\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-8-f51b3ea1b464>:75: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df['traffic_label'] = 'normal'\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "step 1 - label_traffic new column added to the dataset\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                           flow_key  src_ip_numeric         src_ip  src_port  \\\n",
              "0  3acee4f4ea001cd5e6d9584d4036b53d    3.232266e+09  192.168.121.1      67.0   \n",
              "1  974ec5991b439c9a7176b88be0c90df0    3.232266e+09  192.168.121.1      67.0   \n",
              "2  3acee4f4ea001cd5e6d9584d4036b53d    3.232266e+09  192.168.121.1      67.0   \n",
              "3  974ec5991b439c9a7176b88be0c90df0    3.232266e+09  192.168.121.1      67.0   \n",
              "4  cfa7c2740072befaa89c202499729e08    3.232266e+09  192.168.121.1       0.0   \n",
              "\n",
              "           dst_ip  dst_port  proto  pktTotalCount  octetTotalCount  min_ps  \\\n",
              "0  172.16.255.185      67.0   17.0           22.0           7620.0   328.0   \n",
              "1  172.16.255.186      67.0   17.0           17.0           5670.0   328.0   \n",
              "2  172.16.255.185      67.0   17.0           43.0          15124.0   328.0   \n",
              "3  172.16.255.186      67.0   17.0           30.0          10086.0   328.0   \n",
              "4    10.130.1.166       0.0    1.0            1.0             56.0    56.0   \n",
              "\n",
              "   ...  b_flowDuration  b_min_piat  b_max_piat  b_avg_piat  b_std_dev_piat  \\\n",
              "0  ...    1.550000e+12    0.010354  198.657965   51.689181       84.916348   \n",
              "1  ...    0.000000e+00    0.000000    0.000000    0.000000        0.000000   \n",
              "2  ...    1.550000e+12    0.022332  340.268454   89.927588      124.270745   \n",
              "3  ...    0.000000e+00    0.000000    0.000000    0.000000        0.000000   \n",
              "4  ...    0.000000e+00    0.000000    0.000000    0.000000        0.000000   \n",
              "\n",
              "   flowEndReason  category  application_protocol  web_service  traffic_label  \n",
              "0            2.0   Network               Unknown         DHCP      malicious  \n",
              "1            2.0   Network               Unknown         DHCP      malicious  \n",
              "2            2.0   Network               Unknown         DHCP      malicious  \n",
              "3            2.0   Network               Unknown         DHCP      malicious  \n",
              "4            2.0   Network               Unknown         ICMP      malicious  \n",
              "\n",
              "[5 rows x 51 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f1501648-343e-46f6-af5b-b765279078bf\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>flow_key</th>\n",
              "      <th>src_ip_numeric</th>\n",
              "      <th>src_ip</th>\n",
              "      <th>src_port</th>\n",
              "      <th>dst_ip</th>\n",
              "      <th>dst_port</th>\n",
              "      <th>proto</th>\n",
              "      <th>pktTotalCount</th>\n",
              "      <th>octetTotalCount</th>\n",
              "      <th>min_ps</th>\n",
              "      <th>...</th>\n",
              "      <th>b_flowDuration</th>\n",
              "      <th>b_min_piat</th>\n",
              "      <th>b_max_piat</th>\n",
              "      <th>b_avg_piat</th>\n",
              "      <th>b_std_dev_piat</th>\n",
              "      <th>flowEndReason</th>\n",
              "      <th>category</th>\n",
              "      <th>application_protocol</th>\n",
              "      <th>web_service</th>\n",
              "      <th>traffic_label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3acee4f4ea001cd5e6d9584d4036b53d</td>\n",
              "      <td>3.232266e+09</td>\n",
              "      <td>192.168.121.1</td>\n",
              "      <td>67.0</td>\n",
              "      <td>172.16.255.185</td>\n",
              "      <td>67.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>7620.0</td>\n",
              "      <td>328.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.550000e+12</td>\n",
              "      <td>0.010354</td>\n",
              "      <td>198.657965</td>\n",
              "      <td>51.689181</td>\n",
              "      <td>84.916348</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Network</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>DHCP</td>\n",
              "      <td>malicious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>974ec5991b439c9a7176b88be0c90df0</td>\n",
              "      <td>3.232266e+09</td>\n",
              "      <td>192.168.121.1</td>\n",
              "      <td>67.0</td>\n",
              "      <td>172.16.255.186</td>\n",
              "      <td>67.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>5670.0</td>\n",
              "      <td>328.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Network</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>DHCP</td>\n",
              "      <td>malicious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3acee4f4ea001cd5e6d9584d4036b53d</td>\n",
              "      <td>3.232266e+09</td>\n",
              "      <td>192.168.121.1</td>\n",
              "      <td>67.0</td>\n",
              "      <td>172.16.255.185</td>\n",
              "      <td>67.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>43.0</td>\n",
              "      <td>15124.0</td>\n",
              "      <td>328.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.550000e+12</td>\n",
              "      <td>0.022332</td>\n",
              "      <td>340.268454</td>\n",
              "      <td>89.927588</td>\n",
              "      <td>124.270745</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Network</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>DHCP</td>\n",
              "      <td>malicious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>974ec5991b439c9a7176b88be0c90df0</td>\n",
              "      <td>3.232266e+09</td>\n",
              "      <td>192.168.121.1</td>\n",
              "      <td>67.0</td>\n",
              "      <td>172.16.255.186</td>\n",
              "      <td>67.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>10086.0</td>\n",
              "      <td>328.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Network</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>DHCP</td>\n",
              "      <td>malicious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>cfa7c2740072befaa89c202499729e08</td>\n",
              "      <td>3.232266e+09</td>\n",
              "      <td>192.168.121.1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>10.130.1.166</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>56.0</td>\n",
              "      <td>56.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Network</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>ICMP</td>\n",
              "      <td>malicious</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 51 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f1501648-343e-46f6-af5b-b765279078bf')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f1501648-343e-46f6-af5b-b765279078bf button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f1501648-343e-46f6-af5b-b765279078bf');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a5953f90-1b0b-4af0-89dc-53fe95c1a9e6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a5953f90-1b0b-4af0-89dc-53fe95c1a9e6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a5953f90-1b0b-4af0-89dc-53fe95c1a9e6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "step 2 - Specific Features dropped\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                           flow_key  src_ip_numeric         src_ip  src_port  \\\n",
              "0  3acee4f4ea001cd5e6d9584d4036b53d    3.232266e+09  192.168.121.1      67.0   \n",
              "1  974ec5991b439c9a7176b88be0c90df0    3.232266e+09  192.168.121.1      67.0   \n",
              "2  3acee4f4ea001cd5e6d9584d4036b53d    3.232266e+09  192.168.121.1      67.0   \n",
              "3  974ec5991b439c9a7176b88be0c90df0    3.232266e+09  192.168.121.1      67.0   \n",
              "4  cfa7c2740072befaa89c202499729e08    3.232266e+09  192.168.121.1       0.0   \n",
              "\n",
              "           dst_ip  dst_port  proto  pktTotalCount  octetTotalCount  min_ps  \\\n",
              "0  172.16.255.185      67.0   17.0           22.0           7620.0   328.0   \n",
              "1  172.16.255.186      67.0   17.0           17.0           5670.0   328.0   \n",
              "2  172.16.255.185      67.0   17.0           43.0          15124.0   328.0   \n",
              "3  172.16.255.186      67.0   17.0           30.0          10086.0   328.0   \n",
              "4    10.130.1.166       0.0    1.0            1.0             56.0    56.0   \n",
              "\n",
              "   ...  b_flowDuration  b_min_piat  b_max_piat  b_avg_piat  b_std_dev_piat  \\\n",
              "0  ...    1.550000e+12    0.010354  198.657965   51.689181       84.916348   \n",
              "1  ...    0.000000e+00    0.000000    0.000000    0.000000        0.000000   \n",
              "2  ...    1.550000e+12    0.022332  340.268454   89.927588      124.270745   \n",
              "3  ...    0.000000e+00    0.000000    0.000000    0.000000        0.000000   \n",
              "4  ...    0.000000e+00    0.000000    0.000000    0.000000        0.000000   \n",
              "\n",
              "   flowEndReason  category  application_protocol  web_service  traffic_label  \n",
              "0            2.0   Network               Unknown         DHCP      malicious  \n",
              "1            2.0   Network               Unknown         DHCP      malicious  \n",
              "2            2.0   Network               Unknown         DHCP      malicious  \n",
              "3            2.0   Network               Unknown         DHCP      malicious  \n",
              "4            2.0   Network               Unknown         ICMP      malicious  \n",
              "\n",
              "[5 rows x 51 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e2d64e3c-c6e5-4473-b1ab-0373869119b2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>flow_key</th>\n",
              "      <th>src_ip_numeric</th>\n",
              "      <th>src_ip</th>\n",
              "      <th>src_port</th>\n",
              "      <th>dst_ip</th>\n",
              "      <th>dst_port</th>\n",
              "      <th>proto</th>\n",
              "      <th>pktTotalCount</th>\n",
              "      <th>octetTotalCount</th>\n",
              "      <th>min_ps</th>\n",
              "      <th>...</th>\n",
              "      <th>b_flowDuration</th>\n",
              "      <th>b_min_piat</th>\n",
              "      <th>b_max_piat</th>\n",
              "      <th>b_avg_piat</th>\n",
              "      <th>b_std_dev_piat</th>\n",
              "      <th>flowEndReason</th>\n",
              "      <th>category</th>\n",
              "      <th>application_protocol</th>\n",
              "      <th>web_service</th>\n",
              "      <th>traffic_label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3acee4f4ea001cd5e6d9584d4036b53d</td>\n",
              "      <td>3.232266e+09</td>\n",
              "      <td>192.168.121.1</td>\n",
              "      <td>67.0</td>\n",
              "      <td>172.16.255.185</td>\n",
              "      <td>67.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>7620.0</td>\n",
              "      <td>328.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.550000e+12</td>\n",
              "      <td>0.010354</td>\n",
              "      <td>198.657965</td>\n",
              "      <td>51.689181</td>\n",
              "      <td>84.916348</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Network</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>DHCP</td>\n",
              "      <td>malicious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>974ec5991b439c9a7176b88be0c90df0</td>\n",
              "      <td>3.232266e+09</td>\n",
              "      <td>192.168.121.1</td>\n",
              "      <td>67.0</td>\n",
              "      <td>172.16.255.186</td>\n",
              "      <td>67.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>5670.0</td>\n",
              "      <td>328.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Network</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>DHCP</td>\n",
              "      <td>malicious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3acee4f4ea001cd5e6d9584d4036b53d</td>\n",
              "      <td>3.232266e+09</td>\n",
              "      <td>192.168.121.1</td>\n",
              "      <td>67.0</td>\n",
              "      <td>172.16.255.185</td>\n",
              "      <td>67.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>43.0</td>\n",
              "      <td>15124.0</td>\n",
              "      <td>328.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.550000e+12</td>\n",
              "      <td>0.022332</td>\n",
              "      <td>340.268454</td>\n",
              "      <td>89.927588</td>\n",
              "      <td>124.270745</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Network</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>DHCP</td>\n",
              "      <td>malicious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>974ec5991b439c9a7176b88be0c90df0</td>\n",
              "      <td>3.232266e+09</td>\n",
              "      <td>192.168.121.1</td>\n",
              "      <td>67.0</td>\n",
              "      <td>172.16.255.186</td>\n",
              "      <td>67.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>10086.0</td>\n",
              "      <td>328.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Network</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>DHCP</td>\n",
              "      <td>malicious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>cfa7c2740072befaa89c202499729e08</td>\n",
              "      <td>3.232266e+09</td>\n",
              "      <td>192.168.121.1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>10.130.1.166</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>56.0</td>\n",
              "      <td>56.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Network</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>ICMP</td>\n",
              "      <td>malicious</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 51 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e2d64e3c-c6e5-4473-b1ab-0373869119b2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e2d64e3c-c6e5-4473-b1ab-0373869119b2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e2d64e3c-c6e5-4473-b1ab-0373869119b2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-eafbd2ea-e76f-49c0-a6e9-d6a98e7ccd6a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-eafbd2ea-e76f-49c0-a6e9-d6a98e7ccd6a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-eafbd2ea-e76f-49c0-a6e9-d6a98e7ccd6a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset Loaded and ready to be Preprocessed - Time Elapsed: 0:00:00.000077\n",
            " NaN values and mixed types Handled - Time Elapsed: 0:00:00.172939\n",
            "step 3 - NaN values and mixed types Handled\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                           flow_key  src_ip_numeric         src_ip  src_port  \\\n",
              "0  3acee4f4ea001cd5e6d9584d4036b53d    3.232266e+09  192.168.121.1      67.0   \n",
              "1  974ec5991b439c9a7176b88be0c90df0    3.232266e+09  192.168.121.1      67.0   \n",
              "2  3acee4f4ea001cd5e6d9584d4036b53d    3.232266e+09  192.168.121.1      67.0   \n",
              "3  974ec5991b439c9a7176b88be0c90df0    3.232266e+09  192.168.121.1      67.0   \n",
              "4  cfa7c2740072befaa89c202499729e08    3.232266e+09  192.168.121.1       0.0   \n",
              "\n",
              "           dst_ip  dst_port  proto  pktTotalCount  octetTotalCount  min_ps  \\\n",
              "0  172.16.255.185      67.0   17.0           22.0           7620.0   328.0   \n",
              "1  172.16.255.186      67.0   17.0           17.0           5670.0   328.0   \n",
              "2  172.16.255.185      67.0   17.0           43.0          15124.0   328.0   \n",
              "3  172.16.255.186      67.0   17.0           30.0          10086.0   328.0   \n",
              "4    10.130.1.166       0.0    1.0            1.0             56.0    56.0   \n",
              "\n",
              "   ...  b_flowDuration  b_min_piat  b_max_piat  b_avg_piat  b_std_dev_piat  \\\n",
              "0  ...    1.550000e+12    0.010354  198.657965   51.689181       84.916348   \n",
              "1  ...    0.000000e+00    0.000000    0.000000    0.000000        0.000000   \n",
              "2  ...    1.550000e+12    0.022332  340.268454   89.927588      124.270745   \n",
              "3  ...    0.000000e+00    0.000000    0.000000    0.000000        0.000000   \n",
              "4  ...    0.000000e+00    0.000000    0.000000    0.000000        0.000000   \n",
              "\n",
              "   flowEndReason  category  application_protocol  web_service  traffic_label  \n",
              "0            2.0   Network               Unknown         DHCP      malicious  \n",
              "1            2.0   Network               Unknown         DHCP      malicious  \n",
              "2            2.0   Network               Unknown         DHCP      malicious  \n",
              "3            2.0   Network               Unknown         DHCP      malicious  \n",
              "4            2.0   Network               Unknown         ICMP      malicious  \n",
              "\n",
              "[5 rows x 51 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-16f53e5c-1932-45fa-ab9b-68edf64f415e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>flow_key</th>\n",
              "      <th>src_ip_numeric</th>\n",
              "      <th>src_ip</th>\n",
              "      <th>src_port</th>\n",
              "      <th>dst_ip</th>\n",
              "      <th>dst_port</th>\n",
              "      <th>proto</th>\n",
              "      <th>pktTotalCount</th>\n",
              "      <th>octetTotalCount</th>\n",
              "      <th>min_ps</th>\n",
              "      <th>...</th>\n",
              "      <th>b_flowDuration</th>\n",
              "      <th>b_min_piat</th>\n",
              "      <th>b_max_piat</th>\n",
              "      <th>b_avg_piat</th>\n",
              "      <th>b_std_dev_piat</th>\n",
              "      <th>flowEndReason</th>\n",
              "      <th>category</th>\n",
              "      <th>application_protocol</th>\n",
              "      <th>web_service</th>\n",
              "      <th>traffic_label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3acee4f4ea001cd5e6d9584d4036b53d</td>\n",
              "      <td>3.232266e+09</td>\n",
              "      <td>192.168.121.1</td>\n",
              "      <td>67.0</td>\n",
              "      <td>172.16.255.185</td>\n",
              "      <td>67.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>7620.0</td>\n",
              "      <td>328.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.550000e+12</td>\n",
              "      <td>0.010354</td>\n",
              "      <td>198.657965</td>\n",
              "      <td>51.689181</td>\n",
              "      <td>84.916348</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Network</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>DHCP</td>\n",
              "      <td>malicious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>974ec5991b439c9a7176b88be0c90df0</td>\n",
              "      <td>3.232266e+09</td>\n",
              "      <td>192.168.121.1</td>\n",
              "      <td>67.0</td>\n",
              "      <td>172.16.255.186</td>\n",
              "      <td>67.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>5670.0</td>\n",
              "      <td>328.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Network</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>DHCP</td>\n",
              "      <td>malicious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3acee4f4ea001cd5e6d9584d4036b53d</td>\n",
              "      <td>3.232266e+09</td>\n",
              "      <td>192.168.121.1</td>\n",
              "      <td>67.0</td>\n",
              "      <td>172.16.255.185</td>\n",
              "      <td>67.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>43.0</td>\n",
              "      <td>15124.0</td>\n",
              "      <td>328.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.550000e+12</td>\n",
              "      <td>0.022332</td>\n",
              "      <td>340.268454</td>\n",
              "      <td>89.927588</td>\n",
              "      <td>124.270745</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Network</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>DHCP</td>\n",
              "      <td>malicious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>974ec5991b439c9a7176b88be0c90df0</td>\n",
              "      <td>3.232266e+09</td>\n",
              "      <td>192.168.121.1</td>\n",
              "      <td>67.0</td>\n",
              "      <td>172.16.255.186</td>\n",
              "      <td>67.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>10086.0</td>\n",
              "      <td>328.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Network</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>DHCP</td>\n",
              "      <td>malicious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>cfa7c2740072befaa89c202499729e08</td>\n",
              "      <td>3.232266e+09</td>\n",
              "      <td>192.168.121.1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>10.130.1.166</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>56.0</td>\n",
              "      <td>56.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Network</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>ICMP</td>\n",
              "      <td>malicious</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 51 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-16f53e5c-1932-45fa-ab9b-68edf64f415e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-16f53e5c-1932-45fa-ab9b-68edf64f415e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-16f53e5c-1932-45fa-ab9b-68edf64f415e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-20869043-b30b-48cb-b359-647b1b63024f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-20869043-b30b-48cb-b359-647b1b63024f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-20869043-b30b-48cb-b359-647b1b63024f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Categorical Labels Encoded - Time Elapsed: 0:00:00.263318\n",
            "step 4 - After Encodign categorical labels\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                           flow_key  src_ip_numeric         src_ip  src_port  \\\n",
              "0  3acee4f4ea001cd5e6d9584d4036b53d    3.232266e+09  192.168.121.1      67.0   \n",
              "1  974ec5991b439c9a7176b88be0c90df0    3.232266e+09  192.168.121.1      67.0   \n",
              "2  3acee4f4ea001cd5e6d9584d4036b53d    3.232266e+09  192.168.121.1      67.0   \n",
              "3  974ec5991b439c9a7176b88be0c90df0    3.232266e+09  192.168.121.1      67.0   \n",
              "4  cfa7c2740072befaa89c202499729e08    3.232266e+09  192.168.121.1       0.0   \n",
              "\n",
              "           dst_ip  dst_port  pktTotalCount  octetTotalCount  min_ps  max_ps  \\\n",
              "0  172.16.255.185      67.0           22.0           7620.0   328.0   394.0   \n",
              "1  172.16.255.186      67.0           17.0           5670.0   328.0   354.0   \n",
              "2  172.16.255.185      67.0           43.0          15124.0   328.0   394.0   \n",
              "3  172.16.255.186      67.0           30.0          10086.0   328.0   352.0   \n",
              "4    10.130.1.166       0.0            1.0             56.0    56.0    56.0   \n",
              "\n",
              "   ...  flowEndReason  category  application_protocol  web_service  \\\n",
              "0  ...            2.0   Network               Unknown         DHCP   \n",
              "1  ...            2.0   Network               Unknown         DHCP   \n",
              "2  ...            2.0   Network               Unknown         DHCP   \n",
              "3  ...            2.0   Network               Unknown         DHCP   \n",
              "4  ...            2.0   Network               Unknown         ICMP   \n",
              "\n",
              "   traffic_label  proto_1.0  proto_6.0  proto_11.05591509707621  proto_17.0  \\\n",
              "0      malicious          0          0                        0           1   \n",
              "1      malicious          0          0                        0           1   \n",
              "2      malicious          0          0                        0           1   \n",
              "3      malicious          0          0                        0           1   \n",
              "4      malicious          1          0                        0           0   \n",
              "\n",
              "   traffic_label_encoded  \n",
              "0                      0  \n",
              "1                      0  \n",
              "2                      0  \n",
              "3                      0  \n",
              "4                      0  \n",
              "\n",
              "[5 rows x 55 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2507d40b-9215-4abf-9475-896c2ef8813a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>flow_key</th>\n",
              "      <th>src_ip_numeric</th>\n",
              "      <th>src_ip</th>\n",
              "      <th>src_port</th>\n",
              "      <th>dst_ip</th>\n",
              "      <th>dst_port</th>\n",
              "      <th>pktTotalCount</th>\n",
              "      <th>octetTotalCount</th>\n",
              "      <th>min_ps</th>\n",
              "      <th>max_ps</th>\n",
              "      <th>...</th>\n",
              "      <th>flowEndReason</th>\n",
              "      <th>category</th>\n",
              "      <th>application_protocol</th>\n",
              "      <th>web_service</th>\n",
              "      <th>traffic_label</th>\n",
              "      <th>proto_1.0</th>\n",
              "      <th>proto_6.0</th>\n",
              "      <th>proto_11.05591509707621</th>\n",
              "      <th>proto_17.0</th>\n",
              "      <th>traffic_label_encoded</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3acee4f4ea001cd5e6d9584d4036b53d</td>\n",
              "      <td>3.232266e+09</td>\n",
              "      <td>192.168.121.1</td>\n",
              "      <td>67.0</td>\n",
              "      <td>172.16.255.185</td>\n",
              "      <td>67.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>7620.0</td>\n",
              "      <td>328.0</td>\n",
              "      <td>394.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Network</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>DHCP</td>\n",
              "      <td>malicious</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>974ec5991b439c9a7176b88be0c90df0</td>\n",
              "      <td>3.232266e+09</td>\n",
              "      <td>192.168.121.1</td>\n",
              "      <td>67.0</td>\n",
              "      <td>172.16.255.186</td>\n",
              "      <td>67.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>5670.0</td>\n",
              "      <td>328.0</td>\n",
              "      <td>354.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Network</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>DHCP</td>\n",
              "      <td>malicious</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3acee4f4ea001cd5e6d9584d4036b53d</td>\n",
              "      <td>3.232266e+09</td>\n",
              "      <td>192.168.121.1</td>\n",
              "      <td>67.0</td>\n",
              "      <td>172.16.255.185</td>\n",
              "      <td>67.0</td>\n",
              "      <td>43.0</td>\n",
              "      <td>15124.0</td>\n",
              "      <td>328.0</td>\n",
              "      <td>394.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Network</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>DHCP</td>\n",
              "      <td>malicious</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>974ec5991b439c9a7176b88be0c90df0</td>\n",
              "      <td>3.232266e+09</td>\n",
              "      <td>192.168.121.1</td>\n",
              "      <td>67.0</td>\n",
              "      <td>172.16.255.186</td>\n",
              "      <td>67.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>10086.0</td>\n",
              "      <td>328.0</td>\n",
              "      <td>352.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Network</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>DHCP</td>\n",
              "      <td>malicious</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>cfa7c2740072befaa89c202499729e08</td>\n",
              "      <td>3.232266e+09</td>\n",
              "      <td>192.168.121.1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>10.130.1.166</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>56.0</td>\n",
              "      <td>56.0</td>\n",
              "      <td>56.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Network</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>ICMP</td>\n",
              "      <td>malicious</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 55 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2507d40b-9215-4abf-9475-896c2ef8813a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2507d40b-9215-4abf-9475-896c2ef8813a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2507d40b-9215-4abf-9475-896c2ef8813a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-268e92cf-962d-41b4-b3fc-3cdfc2f2a6a9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-268e92cf-962d-41b4-b3fc-3cdfc2f2a6a9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-268e92cf-962d-41b4-b3fc-3cdfc2f2a6a9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Data Split into Training 80% and Testing 20% of the dataset - Time Elapsed: 0:00:00.415794\n",
            "Scaling to numeric data Completed - Time Elapsed: 0:00:00.510192\n",
            "step 5 - Scaling oto numeric data Completed\n",
            "SMOT for class imbalance applied - Time Elapsed: 0:00:12.139914\n",
            "step 6 - SMOT applied\n",
            "StratifiedKFold 5 folds cross-validator Implemented - Time Elapsed: 0:00:12.141274\n",
            "step 7 - cross validation 5 fold applied\n",
            "Hyperparameter Tuning applied to all models - Time Elapsed: 0:00:12.142343\n",
            "step 8 - Hyperparameter Tuning applied\n",
            "Classifiers Fitted - Time Elapsed: 0:02:23.522531\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 2 Axes>"
            ],
            "image/png": "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dGpqKvr164fr16/D1tYW9evXx65du/D2228DAObNmwcTExP06NED2dnZ8PHxweLFi6XXm5qaYtu2bRg2bBg8PT1hbW0Nf39/TJ06VWrj6uqK7du3Izg4GAsWLEClSpXw9ddfw8fHR/F4VaIEfzP/+uuvuHv3Ljp06FDk9rt37+L48eNo06ZNkdsfh5cqyBiUbTq8pIdAZHD3TywyaP9HLqUbrO9m1W2f3uglVKKJQ6tWrZ643draWnHRQEREJBenpSjHT8ckIiKjxbpBuVL9HAciIiIqXZg4EBGR8WLkoBgTByIiIpKNiQMRERmt0nA75suGiQMRERHJxsSBiIiMFm/HVI6JAxEREcnGxIGIiIwWAwflWDgQEZHxYuWgGC9VEBERkWxMHIiIyGjxdkzlmDgQERGRbEwciIjIaPF2TOWYOBAREZFsTByIiMhoMXBQjokDERERycbEgYiIjBcjB8VYOBARkdHi7ZjK8VIFERERycbEgYiIjBZvx1SOiQMRERHJxsSBiIiMFgMH5Zg4EBERkWxMHIiIyHgxclCMiQMRERHJxsSBiIiMFp/joBwTByIiIpKNiQMRERktPsdBORYORERktFg3KMdLFURERCQbEwciIjJejBwUY+JAREREsjFxICIio8XbMZVj4kBERESyMXEgIiKjxdsxlWPiQERERLIxcSAiIqPFwEE5Fg5ERGS8WDkoxksVREREJBsTByIiMlq8HVM5Jg5EREQkGxMHIiIyWrwdUzkmDkRERCQbEwciIjJaDByUY+JAREREsrFwICIi46Uy4CJTWFgYmjZtijJlysDe3h5du3ZFQkKCXpusrCwEBgaifPnysLGxQY8ePZCSkqLXJikpCb6+vrCysoK9vT3GjBmDvLw8vTb79u1D48aNodFoUKNGDURFRckf6P9j4UBEREZLZcD/5Nq/fz8CAwNx+PBhREdHIzc3F97e3rh7967UJjg4GFu3bsW3336L/fv349q1a+jevbu0PT8/H76+vsjJycGhQ4ewcuVKREVFYdKkSVKbxMRE+Pr6om3btoiPj0dQUBACAgKwa9cuZedMCCEUveIlkJX39DZEL7uyTYeX9BCIDO7+iUUG7f/yjSyD9V2tosUzve7GjRuwt7fH/v370bp1a6Snp6NixYpYt24devbsCQA4f/486tSpg9jYWDRv3hw7duzAO++8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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Logistic Regression Classifier:\n",
            "Accuracy: 0.6927731932983245 \n",
            "F1-Score: 0.7116639286552453 \n",
            "Recall: 0.7607626693426994 \n",
            "Precision: 0.6685185185185185 \n",
            "AUC-ROC: 0.7754626636898136 \n",
            "Confusion Matrix:\n",
            " [[6271 3759]\n",
            " [2384 7581]]\n",
            "\n",
            "Random Forest Classifier:\n",
            "Accuracy: 0.9383845961490372 \n",
            "F1-Score: 0.9388403494837172 \n",
            "Recall: 0.9489212242849975 \n",
            "Precision: 0.9289714117300324 \n",
            "AUC-ROC: 0.9848142326657758 \n",
            "Confusion Matrix:\n",
            " [[9307  723]\n",
            " [ 509 9456]]\n",
            "\n",
            "AdaBoost Classifier:\n",
            "Accuracy: 0.8017004251062766 \n",
            "F1-Score: 0.8094940662086196 \n",
            "Recall: 0.8453587556447566 \n",
            "Precision: 0.7765486725663717 \n",
            "AUC-ROC: 0.8879878127784233 \n",
            "Confusion Matrix:\n",
            " [[7606 2424]\n",
            " [1541 8424]]\n",
            "\n",
            "Gradient Boosting Classifier:\n",
            "Accuracy: 0.8426106526631658 \n",
            "F1-Score: 0.8509166706144298 \n",
            "Recall: 0.901254390366282 \n",
            "Precision: 0.8059045226130653 \n",
            "AUC-ROC: 0.9312843306507972 \n",
            "Confusion Matrix:\n",
            " [[7867 2163]\n",
            " [ 984 8981]]\n",
            "malicious    50150\n",
            "normal       49824\n",
            "Name: traffic_label, dtype: int64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "            Classifier  Accuracy  F1-Score    Recall  Precision   AUC-ROC  \\\n",
              "0  Logistic Regression  0.692773  0.711664  0.760763   0.668519  0.775463   \n",
              "1        Random Forest  0.938385  0.938840  0.948921   0.928971  0.984814   \n",
              "2             AdaBoost  0.801700  0.809494  0.845359   0.776549  0.887988   \n",
              "3    Gradient Boosting  0.842611  0.850917  0.901254   0.805905  0.931284   \n",
              "4        Decision Tree  0.903126  0.903077  0.905569   0.900599  0.903134   \n",
              "\n",
              "   Running Time (s)  \n",
              "0          2.117233  \n",
              "1         32.942953  \n",
              "2         16.375745  \n",
              "3         77.352439  \n",
              "4          3.536848  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6dad3d5b-0705-4d86-be10-a4c4fb7a68f4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Classifier</th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>F1-Score</th>\n",
              "      <th>Recall</th>\n",
              "      <th>Precision</th>\n",
              "      <th>AUC-ROC</th>\n",
              "      <th>Running Time (s)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Logistic Regression</td>\n",
              "      <td>0.692773</td>\n",
              "      <td>0.711664</td>\n",
              "      <td>0.760763</td>\n",
              "      <td>0.668519</td>\n",
              "      <td>0.775463</td>\n",
              "      <td>2.117233</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Random Forest</td>\n",
              "      <td>0.938385</td>\n",
              "      <td>0.938840</td>\n",
              "      <td>0.948921</td>\n",
              "      <td>0.928971</td>\n",
              "      <td>0.984814</td>\n",
              "      <td>32.942953</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>AdaBoost</td>\n",
              "      <td>0.801700</td>\n",
              "      <td>0.809494</td>\n",
              "      <td>0.845359</td>\n",
              "      <td>0.776549</td>\n",
              "      <td>0.887988</td>\n",
              "      <td>16.375745</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Gradient Boosting</td>\n",
              "      <td>0.842611</td>\n",
              "      <td>0.850917</td>\n",
              "      <td>0.901254</td>\n",
              "      <td>0.805905</td>\n",
              "      <td>0.931284</td>\n",
              "      <td>77.352439</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Decision Tree</td>\n",
              "      <td>0.903126</td>\n",
              "      <td>0.903077</td>\n",
              "      <td>0.905569</td>\n",
              "      <td>0.900599</td>\n",
              "      <td>0.903134</td>\n",
              "      <td>3.536848</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6dad3d5b-0705-4d86-be10-a4c4fb7a68f4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6dad3d5b-0705-4d86-be10-a4c4fb7a68f4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6dad3d5b-0705-4d86-be10-a4c4fb7a68f4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4b0ceddc-1d41-4ade-b542-e53bb66be669\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4b0ceddc-1d41-4ade-b542-e53bb66be669')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4b0ceddc-1d41-4ade-b542-e53bb66be669 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_26e8518c-1faa-43bf-9f7c-22bc992a81fa\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('performance_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_26e8518c-1faa-43bf-9f7c-22bc992a81fa button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('performance_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Process Completed - Time: 0:04:44.072898\n"
          ]
        }
      ],
      "source": [
        "# ALL Features are trained - 10 000 instances (10 000 rows - each row is an instance - each row comprises 50 features\n",
        "# Cross validation applied + Kfold = 5, Hyperparameter tuning applied\n",
        "# 5 Machine Learning exectuted in this environment: RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, DecisionTreeClassifier, LogisticRegression\n",
        "# Bagging (Bootstrap Aggregating) It builds multiple decision trees and merges them together to get a more accurate and stable prediction. Each tree is trained on a random subset of the data.\n",
        "# AdaBoostClassifier (Adaptive Boosting): Boosting. It combines multiple weak classifiers to create a strong classifier. Each classifier is trained on data, taking into account the previous classifiers' mistakes, by adjusting the weights of incorrectly classified instances.\n",
        "# GradientBoostingClassifier: Boosting. It builds an additive model in a forward stage-wise fashion; it allows for the optimization of arbitrary differentiable loss functions. Each new model is trained to correct the errors made by previous models.\n",
        "# DecisionTreeClassifier: Neither bagging nor boosting. It is a single decision tree and can be used as a base estimator in bagging and boosting methods.\n",
        "# LogisticRegression: Neither bagging nor boosting. It is a single model that uses a logistic function to model a binary dependent variable. However, it can be used as a base estimator in ensemble methods.\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import datetime\n",
        "import time  # Importing the time library to track running times\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold\n",
        "from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, confusion_matrix, roc_curve, auc\n",
        "from sklearn.metrics import roc_auc_score\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
        "from imblearn.over_sampling import SMOTE\n",
        "import warnings\n",
        "from sklearn.exceptions import ConvergenceWarning\n",
        "from IPython.display import display\n",
        "\n",
        "def record_time(step_name, overall_start_time):\n",
        "    print(f\"{step_name} - Time Elapsed: {datetime.datetime.now() - overall_start_time}\")\n",
        "\n",
        "def plot_confusion_matrix(cm, classifier_name):\n",
        "    plt.figure(figsize=(6, 6))\n",
        "    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n",
        "    plt.title(f'Confusion Matrix for {classifier_name}')\n",
        "    plt.ylabel('True label')\n",
        "    plt.xlabel('Predicted label')\n",
        "    plt.show()\n",
        "\n",
        "def plot_roc_curve(y_true, y_scores, classifier_name):\n",
        "    fpr, tpr, _ = roc_curve(y_true, y_scores)\n",
        "    roc_auc = auc(fpr, tpr)\n",
        "    plt.figure(figsize=(6, 6))\n",
        "    plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (area = {roc_auc:.2f})')\n",
        "    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n",
        "    plt.xlabel('False Positive Rate')\n",
        "    plt.ylabel('True Positive Rate')\n",
        "    plt.title(f'ROC Curve for {classifier_name}')\n",
        "    plt.legend(loc='lower right')\n",
        "    plt.show()\n",
        "\n",
        "# Initialize a dictionary to store the metrics and running times\n",
        "model_performance = {\n",
        "    'Classifier': [],\n",
        "    'Accuracy': [],\n",
        "    'F1-Score': [],\n",
        "    'Recall': [],\n",
        "    'Precision': [],\n",
        "    'AUC-ROC': [],\n",
        "    'Running Time (s)': []\n",
        "}\n",
        "\n",
        "# Define a function to label traffic as normal or malicious\n",
        "def label_traffic(df):\n",
        "    # Define normal thresholds\n",
        "    normal_protocols = [6, 17, 1]  # TCP and UDP\n",
        "    normal_port_range = set(range(0, 49152))\n",
        "    normal_pkt_count_max = 2000\n",
        "    normal_octet_count_max = 1000000\n",
        "    normal_packet_size_range = range(20, 1500)\n",
        "    normal_flow_duration_range = range(50, 3600000)  # 50 ms to 1 hour\n",
        "    normal_piat_range = range(0, 10000)  # 0 to 10 seconds\n",
        "    max_timestamp = int(1e12)  # Assuming timestamp in milliseconds\n",
        "\n",
        "    # Initialize the traffic_label column\n",
        "    df['traffic_label'] = 'normal'\n",
        "\n",
        "    # Vectorized conditions\n",
        "    df.loc[~df['proto'].isin(normal_protocols), 'traffic_label'] = 'malicious'\n",
        "    df.loc[df['flowEndReason'] == 1, 'traffic_label'] = 'malicious'\n",
        "    df.loc[~df['src_port'].isin(normal_port_range), 'traffic_label'] = 'malicious'\n",
        "    df.loc[~df['dst_port'].isin(normal_port_range), 'traffic_label'] = 'malicious'\n",
        "    df.loc[df['pktTotalCount'] > normal_pkt_count_max, 'traffic_label'] = 'malicious'\n",
        "    df.loc[df['octetTotalCount'] > normal_octet_count_max, 'traffic_label'] = 'malicious'\n",
        "    df.loc[~df['min_ps'].isin(normal_packet_size_range), 'traffic_label'] = 'malicious'\n",
        "    df.loc[~df['max_ps'].isin(normal_packet_size_range), 'traffic_label'] = 'malicious'\n",
        "    df.loc[~df['avg_ps'].isin(normal_packet_size_range), 'traffic_label'] = 'malicious'\n",
        "    df.loc[~df['std_dev_ps'].isin(normal_packet_size_range), 'traffic_label'] = 'malicious'\n",
        "    df.loc[~df['flowDuration'].isin(normal_flow_duration_range), 'traffic_label'] = 'malicious'\n",
        "    df.loc[~df['min_piat'].isin(normal_piat_range), 'traffic_label'] = 'malicious'\n",
        "    df.loc[~df['max_piat'].isin(normal_piat_range), 'traffic_label'] = 'malicious'\n",
        "    df.loc[~df['avg_piat'].isin(normal_piat_range), 'traffic_label'] = 'malicious'\n",
        "    df.loc[~df['std_dev_piat'].isin(normal_piat_range), 'traffic_label'] = 'malicious'\n",
        "    df.loc[(df['flowStart'] < 0) | (df['flowStart'] > max_timestamp), 'traffic_label'] = 'malicious'\n",
        "    df.loc[(df['flowEnd'] < 0) | (df['flowEnd'] > max_timestamp), 'traffic_label'] = 'malicious'\n",
        "    df.loc[df['flowEnd'] < df['flowStart'], 'traffic_label'] = 'malicious'\n",
        "\n",
        "    # Process forward and backward flow features\n",
        "    for prefix in ['f_', 'b_']:\n",
        "        df.loc[df[prefix + 'pktTotalCount'] > normal_pkt_count_max, 'traffic_label'] = 'malicious'\n",
        "        df.loc[df[prefix + 'octetTotalCount'] > normal_octet_count_max, 'traffic_label'] = 'malicious'\n",
        "        df.loc[~df[prefix + 'min_ps'].isin(normal_packet_size_range), 'traffic_label'] = 'malicious'\n",
        "        df.loc[~df[prefix + 'max_ps'].isin(normal_packet_size_range), 'traffic_label'] = 'malicious'\n",
        "        df.loc[~df[prefix + 'avg_ps'].isin(normal_packet_size_range), 'traffic_label'] = 'malicious'\n",
        "        df.loc[~df[prefix + 'std_dev_ps'].isin(normal_packet_size_range), 'traffic_label'] = 'malicious'\n",
        "        df.loc[~df[prefix + 'flowDuration'].isin(normal_flow_duration_range), 'traffic_label'] = 'malicious'\n",
        "        df.loc[~df[prefix + 'min_piat'].isin(normal_piat_range), 'traffic_label'] = 'malicious'\n",
        "        df.loc[~df[prefix + 'max_piat'].isin(normal_piat_range), 'traffic_label'] = 'malicious'\n",
        "        df.loc[~df[prefix + 'avg_piat'].isin(normal_piat_range), 'traffic_label'] = 'malicious'\n",
        "        df.loc[~df[prefix + 'std_dev_piat'].isin(normal_piat_range), 'traffic_label'] = 'malicious'\n",
        "\n",
        "        # Convert IP columns to string, handling NaN values\n",
        "        df['src_ip'] = df['src_ip'].fillna('unknown').astype(str)\n",
        "        df['dst_ip'] = df['dst_ip'].fillna('unknown').astype(str)\n",
        "\n",
        "        # IP Address checks\n",
        "        normal_src_ip_ranges = ['192.168.', '10.', '172.']\n",
        "        df.loc[df['src_ip'].apply(lambda ip: any(ip.startswith(range) for range in normal_src_ip_ranges)), 'traffic_label'] = 'normal'\n",
        "        df.loc[df['dst_ip'].apply(lambda ip: any(ip.startswith(range) for range in normal_src_ip_ranges)), 'traffic_label'] = 'normal'\n",
        "\n",
        "\n",
        "    # Web service, application protocol, and category checks\n",
        "    normal_web_services = ['Google', 'Microsoft', 'HTTP', 'DNS', 'Amazon', 'MSN', 'TLS', 'Yahoo', 'DHCP', 'WindowsUpdate', 'NetBIOS', 'RX', 'MS_OneDrive', 'GMail', 'Dropbox', 'GoogleServices', 'ICMP', 'UbuntuONE', 'GoogleDrive', 'YouTube', 'HTTP_Proxy', 'NTP', 'Apple', 'AppleiTunes', 'AppleStore', 'ApplePush', 'AppleiCloud', 'IMAPS', 'IMO', 'Office365', 'Skype', 'Cloudflare']\n",
        "    normal_application_protocols = ['HTTP', 'TLS', 'DNS', 'QUIC', 'IMAPS', 'STUN', 'SMTPS', 'POPS', 'Skype', 'SMBv23', 'NetBIOS', 'RDP', 'ApplePush', 'MQTT']\n",
        "    normal_categories = ['Network', 'Web', 'SoftwareUpdate', 'RPC', 'System', 'Cloud', 'Mail', 'FTP', 'VPN', 'RemoteAccess', 'Email', 'Media', 'Streaming', 'VoIP', 'Collaborative']\n",
        "\n",
        "    df.loc[~df['web_service'].isin(normal_web_services), 'traffic_label'] = 'malicious'\n",
        "    df.loc[~df['application_protocol'].isin(normal_application_protocols), 'traffic_label'] = 'malicious'\n",
        "    df.loc[~df['category'].isin(normal_categories), 'traffic_label'] = 'malicious'\n",
        "\n",
        "    return df\n",
        "\n",
        "# Load the dataset\n",
        "df = pd.read_csv('Unicauca-dataset-April-June-2019-Network-flows-100000rows(ALLFEATURES).csv')\n",
        "\n",
        "# Remove duplicate rows if any\n",
        "df = df.drop_duplicates()\n",
        "print(f\"Dataset shape after removing duplicates: {df.shape}\")\n",
        "\n",
        "# Get the number of instances (rows)\n",
        "num_instances = df.shape[0]\n",
        "print(\"Number of instances:\", num_instances)\n",
        "\n",
        "df = label_traffic(df)\n",
        "\n",
        "print(\"step 1 - label_traffic new column added to the dataset\")\n",
        "display(df.head(5))\n",
        "\n",
        "print(\"step 2 - Specific Features dropped\")\n",
        "display(df.head(5))\n",
        "\n",
        "overall_start_time = datetime.datetime.now()\n",
        "record_time(\"Dataset Loaded and ready to be Preprocessed\", overall_start_time)\n",
        "\n",
        "# Handle NaN values and mixed types\n",
        "df = df.apply(lambda x: x.fillna(x.mean()) if x.dtype == np.float64 else x.fillna('Unknown'))\n",
        "record_time(\" NaN values and mixed types Handled\", overall_start_time)\n",
        "\n",
        "print(\"step 3 - NaN values and mixed types Handled\")\n",
        "display(df.head())\n",
        "\n",
        "# Encode categorical labels\n",
        "label_encoder = LabelEncoder()\n",
        "# Encode categorical labels using an existing column\n",
        "df = pd.get_dummies(df, columns=['proto'])\n",
        "\n",
        "df['traffic_label_encoded'] = label_encoder.fit_transform(df['traffic_label'])\n",
        "record_time(\"Categorical Labels Encoded\", overall_start_time)\n",
        "\n",
        "print(\"step 4 - After Encodign categorical labels\")\n",
        "display(df.head(5))\n",
        "\n",
        "# Split data into training and testing sets\n",
        "X = df.drop(['traffic_label', 'traffic_label_encoded'], axis=1)  # Now X includes all features\n",
        "y = df['traffic_label_encoded']\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n",
        "\n",
        "record_time(\"Data Split into Training 80% and Testing 20% of the dataset\", overall_start_time)\n",
        "\n",
        "# Filter only numeric columns for scaling\n",
        "numeric_cols = X_train.select_dtypes(include=[np.number]).columns\n",
        "X_train_numeric = X_train[numeric_cols]\n",
        "X_test_numeric = X_test[numeric_cols]\n",
        "\n",
        "# Apply scaling to numeric data\n",
        "scaler = StandardScaler()\n",
        "X_train_scaled = scaler.fit_transform(X_train_numeric)\n",
        "X_test_scaled = scaler.transform(X_test_numeric)\n",
        "record_time(\"Scaling to numeric data Completed\", overall_start_time)\n",
        "print(\"step 5 - Scaling oto numeric data Completed\")\n",
        "\n",
        "# SMOTE to address class imbalance\n",
        "smote = SMOTE(random_state=42)\n",
        "X_train_resampled, y_train_resampled = smote.fit_resample(X_train_scaled, y_train)\n",
        "record_time(\"SMOT for class imbalance applied\", overall_start_time)\n",
        "print(\"step 6 - SMOT applied\")\n",
        "\n",
        "# Define the StratifiedKFold cross-validator\n",
        "stratified_kfold = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
        "record_time(\"StratifiedKFold 5 folds cross-validator Implemented\", overall_start_time)\n",
        "print(\"step 7 - cross validation 5 fold applied\")\n",
        "\n",
        "# Hyperparameter grids\n",
        "param_grid_lr = {\n",
        "    'C': [0.01, 0.1, 1, 10],\n",
        "    'solver': ['liblinear', 'saga'],\n",
        "    'max_iter': [500]\n",
        "}\n",
        "param_grid_rf = {\n",
        "    'n_estimators': [10, 50, 100],\n",
        "    'max_depth': [None, 10, 20],\n",
        "}\n",
        "param_grid_ab = {\n",
        "    'n_estimators': [50, 100, 200],\n",
        "    'learning_rate': [0.01, 0.1, 1],\n",
        "}\n",
        "param_grid_gb = {\n",
        "    'n_estimators': [50, 100, 200],\n",
        "    'learning_rate': [0.01, 0.1, 1],\n",
        "    'max_depth': [3, 5, 7],\n",
        "}\n",
        "param_grid_dt = {\n",
        "    'max_depth': [None, 10, 20, 30],\n",
        "    'min_samples_split': [2, 5, 10],\n",
        "    'min_samples_leaf': [1, 2, 4],\n",
        "    'criterion': ['gini', 'entropy']\n",
        "}\n",
        "record_time(\"Hyperparameter Tuning applied to all models\", overall_start_time)\n",
        "print(\"step 8 - Hyperparameter Tuning applied\")\n",
        "\n",
        "# Suppress ConvergenceWarning for logistic regression\n",
        "warnings.filterwarnings(\"ignore\", category=ConvergenceWarning)\n",
        "lr_clf = LogisticRegression(random_state=42)\n",
        "rf_clf = RandomForestClassifier(random_state=42)\n",
        "ab_clf = AdaBoostClassifier(random_state=42)\n",
        "gb_clf = GradientBoostingClassifier(random_state=42)\n",
        "dt_clf = DecisionTreeClassifier(random_state=42)\n",
        "\n",
        "lr_clf.fit(X_train_resampled, y_train_resampled)\n",
        "rf_clf.fit(X_train_resampled, y_train_resampled)\n",
        "ab_clf.fit(X_train_resampled, y_train_resampled)\n",
        "gb_clf.fit(X_train_resampled, y_train_resampled)\n",
        "dt_clf.fit(X_train_resampled, y_train_resampled)\n",
        "record_time(\"Classifiers Fitted\", overall_start_time)\n",
        "\n",
        "# Evaluate models and plot confusion matrices and ROC curves\n",
        "for clf, name in [(lr_clf, 'Logistic Regression'), (rf_clf, 'Random Forest'), (ab_clf, 'AdaBoost'), (gb_clf, 'Gradient Boosting'), (dt_clf, 'Decision Tree')]:\n",
        "    # Predictions and probabilities\n",
        "    y_pred = clf.predict(X_test_scaled)\n",
        "    y_pred_proba = clf.predict_proba(X_test_scaled)[:, 1]\n",
        "\n",
        "    # Confusion matrix\n",
        "    cm = confusion_matrix(y_test, y_pred)\n",
        "    plot_confusion_matrix(cm, name)\n",
        "\n",
        "    # ROC curve\n",
        "    plot_roc_curve(y_test, y_pred_proba, name)\n",
        "\n",
        "# Calculate accuracy and F1-score for each model\n",
        "lr_accuracy, lr_f1 = accuracy_score(y_test, lr_clf.predict(X_test_scaled)), f1_score(y_test, lr_clf.predict(X_test_scaled))\n",
        "rf_accuracy, rf_f1 = accuracy_score(y_test, rf_clf.predict(X_test_scaled)), f1_score(y_test, rf_clf.predict(X_test_scaled))\n",
        "ab_accuracy, ab_f1 = accuracy_score(y_test, ab_clf.predict(X_test_scaled)), f1_score(y_test, ab_clf.predict(X_test_scaled))\n",
        "gb_accuracy, gb_f1 = accuracy_score(y_test, gb_clf.predict(X_test_scaled)), f1_score(y_test, gb_clf.predict(X_test_scaled))\n",
        "dt_accuracy, dt_f1 = accuracy_score(y_test, dt_clf.predict(X_test_scaled)), f1_score(y_test, dt_clf.predict(X_test_scaled))\n",
        "\n",
        "# Calculate recall for each model\n",
        "lr_recall = recall_score(y_test, lr_clf.predict(X_test_scaled))\n",
        "rf_recall = recall_score(y_test, rf_clf.predict(X_test_scaled))\n",
        "ab_recall = recall_score(y_test, ab_clf.predict(X_test_scaled))\n",
        "gb_recall = recall_score(y_test, gb_clf.predict(X_test_scaled))\n",
        "dt_recall = recall_score(y_test, dt_clf.predict(X_test_scaled))\n",
        "\n",
        "# Calculate precision for each model\n",
        "lr_precision = precision_score(y_test, lr_clf.predict(X_test_scaled))\n",
        "rf_precision = precision_score(y_test, rf_clf.predict(X_test_scaled))\n",
        "ab_precision = precision_score(y_test, ab_clf.predict(X_test_scaled))\n",
        "gb_precision = precision_score(y_test, gb_clf.predict(X_test_scaled))\n",
        "dt_precision = precision_score(y_test, dt_clf.predict(X_test_scaled))\n",
        "\n",
        "# Calculate AUC-ROC for each model\n",
        "lr_auc = roc_auc_score(y_test, lr_clf.predict_proba(X_test_scaled)[:, 1])\n",
        "rf_auc = roc_auc_score(y_test, rf_clf.predict_proba(X_test_scaled)[:, 1])\n",
        "ab_auc = roc_auc_score(y_test, ab_clf.predict_proba(X_test_scaled)[:, 1])\n",
        "gb_auc = roc_auc_score(y_test, gb_clf.predict_proba(X_test_scaled)[:, 1])\n",
        "dt_auc = roc_auc_score(y_test, dt_clf.predict_proba(X_test_scaled)[:, 1])\n",
        "\n",
        "# Print the results along with confusion matrix numbers\n",
        "print(\"\\nLogistic Regression Classifier:\\nAccuracy:\", lr_accuracy, \"\\nF1-Score:\", lr_f1, \"\\nRecall:\", lr_recall, \"\\nPrecision:\", lr_precision, \"\\nAUC-ROC:\", lr_auc, \"\\nConfusion Matrix:\\n\", confusion_matrix(y_test, lr_clf.predict(X_test_scaled)))\n",
        "print(\"\\nRandom Forest Classifier:\\nAccuracy:\", rf_accuracy, \"\\nF1-Score:\", rf_f1, \"\\nRecall:\", rf_recall, \"\\nPrecision:\", rf_precision, \"\\nAUC-ROC:\", rf_auc, \"\\nConfusion Matrix:\\n\", confusion_matrix(y_test, rf_clf.predict(X_test_scaled)))\n",
        "print(\"\\nAdaBoost Classifier:\\nAccuracy:\", ab_accuracy, \"\\nF1-Score:\", ab_f1, \"\\nRecall:\", ab_recall, \"\\nPrecision:\", ab_precision, \"\\nAUC-ROC:\", ab_auc, \"\\nConfusion Matrix:\\n\", confusion_matrix(y_test, ab_clf.predict(X_test_scaled)))\n",
        "print(\"\\nGradient Boosting Classifier:\\nAccuracy:\", gb_accuracy, \"\\nF1-Score:\", gb_f1, \"\\nRecall:\", gb_recall, \"\\nPrecision:\", gb_precision, \"\\nAUC-ROC:\", gb_auc, \"\\nConfusion Matrix:\\n\", confusion_matrix(y_test, gb_clf.predict(X_test_scaled)))\n",
        "\n",
        "class_counts = df['traffic_label'].value_counts()\n",
        "print(class_counts)\n",
        "\n",
        "# Initialize a dictionary to store the metrics and running times\n",
        "model_performance = {\n",
        "    'Classifier': [],\n",
        "    'Accuracy': [],\n",
        "    'F1-Score': [],\n",
        "    'Recall': [],\n",
        "    'Precision': [],\n",
        "    'AUC-ROC': [],\n",
        "    'Running Time (s)': []\n",
        "}\n",
        "\n",
        "# Function to evaluate the model and store its performance\n",
        "def evaluate_model(clf, name, X_train, y_train, X_test, y_test):\n",
        "    start_time = time.time()  # Start time\n",
        "    clf.fit(X_train, y_train)  # Training the model\n",
        "    y_pred = clf.predict(X_test)  # Predicting using the model\n",
        "    y_pred_proba = clf.predict_proba(X_test)[:, 1]  # Probability predictions for AUC\n",
        "    end_time = time.time()  # End time\n",
        "\n",
        "    # Calculating metrics\n",
        "    accuracy = accuracy_score(y_test, y_pred)\n",
        "    f1 = f1_score(y_test, y_pred)\n",
        "    recall = recall_score(y_test, y_pred)\n",
        "    precision = precision_score(y_test, y_pred)\n",
        "    auc_roc = roc_auc_score(y_test, y_pred_proba)\n",
        "    running_time = end_time - start_time  # Calculate running time\n",
        "\n",
        "    # Storing metrics and running time in the dictionary\n",
        "    model_performance['Classifier'].append(name)\n",
        "    model_performance['Accuracy'].append(accuracy)\n",
        "    model_performance['F1-Score'].append(f1)\n",
        "    model_performance['Recall'].append(recall)\n",
        "    model_performance['Precision'].append(precision)\n",
        "    model_performance['AUC-ROC'].append(auc_roc)\n",
        "    model_performance['Running Time (s)'].append(running_time)\n",
        "\n",
        "# Evaluate each model\n",
        "evaluate_model(lr_clf, 'Logistic Regression', X_train_resampled, y_train_resampled, X_test_scaled, y_test)\n",
        "evaluate_model(rf_clf, 'Random Forest', X_train_resampled, y_train_resampled, X_test_scaled, y_test)\n",
        "evaluate_model(ab_clf, 'AdaBoost', X_train_resampled, y_train_resampled, X_test_scaled, y_test)\n",
        "evaluate_model(gb_clf, 'Gradient Boosting', X_train_resampled, y_train_resampled, X_test_scaled, y_test)\n",
        "evaluate_model(dt_clf, 'Decision Tree', X_train_resampled, y_train_resampled, X_test_scaled, y_test)\n",
        "\n",
        "# Convert the performance dictionary to a DataFrame for easy viewing\n",
        "performance_df = pd.DataFrame(model_performance)\n",
        "\n",
        "# Display the performance table\n",
        "display(performance_df)\n",
        "\n",
        "print(\"\\nProcess Completed - Time:\", datetime.datetime.now() - overall_start_time)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Get the number of instances (rows)\n",
        "num_instances = df.shape[0]\n",
        "\n",
        "print(\"Number of instances:\", num_instances)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LZ2CLoHIDPH6",
        "outputId": "c086a3d9-ff6a-4265-eed5-8fdf71ee7505"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of instances: 99974\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j-0sUxRzywjy",
        "outputId": "a822ee4d-f51d-49b2-999d-8c24c26ec270"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Class distribution in y:\n",
            "0    50150\n",
            "1    49824\n",
            "Name: traffic_label_encoded, dtype: int64\n",
            "\n",
            "Class distribution in y_train:\n",
            "0    40120\n",
            "1    39859\n",
            "Name: traffic_label_encoded, dtype: int64\n",
            "\n",
            "Unique classes in y:\n",
            "[0 1]\n",
            "\n",
            "Unique classes in y_train:\n",
            "[0 1]\n"
          ]
        }
      ],
      "source": [
        "\n",
        "\n",
        "# Method 1: Value Counts\n",
        "print(\"Class distribution in y:\")\n",
        "print(y.value_counts())\n",
        "\n",
        "print(\"\\nClass distribution in y_train:\")\n",
        "print(y_train.value_counts())\n",
        "\n",
        "# Method 2: Unique Values\n",
        "print(\"\\nUnique classes in y:\")\n",
        "print(np.unique(y))\n",
        "\n",
        "print(\"\\nUnique classes in y_train:\")\n",
        "print(np.unique(y_train))"
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMCa661TzyrmBfCmfa2Bx5E",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}